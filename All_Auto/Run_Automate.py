import subprocess
import sys
import os
import time
from datetime import datetime, timedelta

# ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ stdout ‡πÉ‡∏ä‡πâ UTF-8 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
sys.stdout.reconfigure(encoding="utf-8", errors="ignore")

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Log (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
log_file = "system_run.log"

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log (Append Mode)
def write_log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file, "a", encoding="utf-8") as log:
        log.write(f"[{timestamp}] {message}\n")
    print(message)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Console ‡∏î‡πâ‡∏ß‡∏¢

# ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
# required_libraries = [
#     "absl-py", "ace_tools", "astunparse", "attrs", "beautifulsoup4", "betterproto",
#     "blinker", "Brotli", "bs4", "cachetools", "certifi", "cffi", "charset-normalizer",
#     "click", "colorama", "contourpy", "cryptography", "cycler", "filelock", "Flask",
#     "flatbuffers", "fonttools", "frozendict", "fsspec", "gast", "gmpy2", "google-auth",
#     "google-auth-oauthlib", "google-pasta", "greenlet", "grpcio", "grpclib", "h11", "h2",
#     "h5py", "hpack", "huggingface-hub", "hyperframe", "idna", "itsdangerous", "Jinja2",
#     "joblib", "keras", "kiwisolver", "libclang", "lightgbm", "lxml", "Markdown",
#     "markdown-it-py", "MarkupSafe", "matplotlib", "mdurl", "mkl_fft", "mkl_random",
#     "mkl-service", "ml-dtypes", "mpmath", "multidict", "multitasking", "mysql",
#     "mysql-connector-python", "mysqlclient", "namex", "networkx", "ntplib", "numpy",
#     "oauthlib", "opt_einsum", "optree", "outcome", "packaging", "paho-mqtt", "pandas",
#     "pandas_ta", "peewee", "pillow", "pip", "platformdirs", "protobuf", "pyasn1",
#     "pyasn1_modules", "pycparser", "Pygments", "PyMySQL", "pyodbc", "pyparsing",
#     "PySocks", "pythainlp", "python-dateutil", "python-dotenv", "pytz", "PyYAML",
#     "regex", "requests", "requests-oauthlib", "rich", "rsa", "safetensors",
#     "scikit-learn", "scipy", "seaborn", "selenium", "settrade-v2", "setuptools",
#     "six", "sniffio", "sortedcontainers", "soupsieve", "SQLAlchemy", "stringcase",
#     "sympy", "ta", "tensorboard", "tensorboard-data-server", "tensorflow",
#     "tensorflow-addons", "tensorflow-estimator", "tensorflow-intel",
#     "tensorflow-io-gcs-filesystem", "termcolor", "threadpoolctl", "tokenizers",
#     "torch", "torchaudio", "torchvision", "tqdm", "transformers", "trio",
#     "trio-websocket", "typeguard", "typing_extensions", "tzdata",
#     "undetected-chromedriver", "urllib3", "webdriver-manager", "websocket-client",
#     "websockets", "Werkzeug", "wheel", "win-inet-pton", "wrapt", "wsproto",
#     "xgboost", "yfinance"
# ]

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô
def update_yfinance():
    write_log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
    subprocess.run(["pip", "install", "--upgrade", "yfinance"], check=True)
    write_log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
# def check_libraries():
#     installed_libs = subprocess.run(["pip", "list"], capture_output=True, text=True).stdout.lower()

#     for lib in required_libraries:
#         if lib.lower() not in installed_libs:
#             write_log(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö {lib} ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...")
#             subprocess.run(["pip", "install", lib], check=True)
#             write_log(f"‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {lib} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
def run_scripts_for_market(market):
    write_log(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î {market} ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    # üîπ ‡πÅ‡∏¢‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
    thai_scripts = [
        ["./Thai_News_Database.py"],  # ‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢
        ["./Financial_Thai_Quarter.py"],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏ó‡∏¢
        ["./GetdataThaiStocks.py"],  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢
    ]

    america_scripts = [
        ["./America_News_Database.py"],  # ‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
        ["./Financial_America_Quarter.py"],  # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
        ["./GetdataAmericanStock.py"],  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
    ]

    common_scripts = [
        ["./Final_News_Merge.py"],  # ‡∏£‡∏ß‡∏°‡∏Ç‡πà‡∏≤‡∏ß
        ["./Finbert.py"],  # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Sentiment
        ["./calculate_weighted_sentiment.py"],  # ‡∏ó‡∏≥ daily sentiment
        ["./News_Database.py"],  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡∏á Database
        ["./combine.py"],  # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≥ AI
        ["./Stock_Database.py"],  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏•‡∏á Database
        ["./GDP_Database.py"],  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GDP ‡∏•‡∏á Database
        ["./Autotrainmodel.py"],  # Retrain Model
    ]

    # ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô
    scripts_to_run = thai_scripts if market == "‡πÑ‡∏ó‡∏¢" else america_scripts
    scripts_to_run += common_scripts  # ‡∏£‡∏ß‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô

    def is_script_exist(script_path):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ script ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"""
        return os.path.isfile(script_path)

    for step, script_set in enumerate(scripts_to_run, start=1):
        processes = []
        write_log(f"\n--- Step {step}: Running {script_set} ---\n")

        for script in script_set:
            if not is_script_exist(script):
                write_log(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `{script}` ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô...")
                continue

            try:
                # ‚úÖ Force Overwrite: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                write_log(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á Cache ‡∏Ç‡∏≠‡∏á `{script}`...")
                if os.path.exists(script):
                    os.utime(script, None)  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Python ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                
                # ‚úÖ ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
                process = subprocess.run(
                    [sys.executable, script],
                    capture_output=True,
                    text=True,
                    encoding="utf-8",
                    errors="ignore"
                )
                processes.append((script, process))
            except Exception as e:
                write_log(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô `{script}` ‡πÑ‡∏î‡πâ: {e}")
                continue

        for script, process in processes:
            stdout, stderr = process.stdout.strip(), process.stderr.strip()
            write_log(f"\nüìå Output ‡∏à‡∏≤‡∏Å `{script}`:\n{stdout}")
            if stderr:
                write_log(f"‚ö†Ô∏è Error ‡∏à‡∏≤‡∏Å `{script}`:\n{stderr}")

        write_log(f"\n‚úÖ --- Step {step} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ---\n")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤)
def wait_until_next_run():
    now = datetime.now()

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô
    market_times = [
        (now.replace(hour=8, minute=30, second=0, microsecond=0), "‡πÑ‡∏ó‡∏¢"),   # ‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢
        (now.replace(hour=19, minute=30, second=0, microsecond=0), "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤")   # ‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
    ]

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô
    next_run_time, market = None, None
    for market_time, market_name in market_times:
        if now < market_time:
            next_run_time, market = market_time, market_name
            break

    # ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
    if next_run_time is None:
        next_run_time, market = market_times[0][0] + timedelta(days=1), market_times[0][1]

    wait_seconds = (next_run_time - now).total_seconds()

    # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    write_log("\n\n\n" + "=" * 80 + "\n" * 5)  
    write_log(f"‚è≥ ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î {market} ‡∏≠‡∏µ‡∏Å {int(wait_seconds)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({next_run_time.strftime('%Y-%m-%d %H:%M:%S')})...\n")
    write_log("\n" * 5 + "=" * 80 + "\n\n\n")  

    time.sleep(wait_seconds)

# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
update_yfinance()

# ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô
# check_libraries()

# ‚úÖ ‡∏•‡∏π‡∏õ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏á‡∏£‡∏≠‡∏ö (‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢ + ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤)
while True:
    now = datetime.now()
    if now.hour < 12:  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤ ‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢
        run_scripts_for_market("‡πÑ‡∏ó‡∏¢")
    else:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
        run_scripts_for_market("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤")
    
    wait_until_next_run()

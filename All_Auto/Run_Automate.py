import subprocess
import sys
import os
import time
import psutil  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CPU/RAM
from datetime import datetime, timedelta

# ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ stdout ‡πÉ‡∏ä‡πâ UTF-8 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
sys.stdout.reconfigure(encoding="utf-8", errors="ignore")

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Log
log_file = "system_run.log"

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log
def write_log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file, "a", encoding="utf-8") as log:
        log.write(f"[{timestamp}] {message}\n")
    print(message)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Console ‡∏î‡πâ‡∏ß‡∏¢

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö (CPU, RAM)
def check_system_resources():
    memory = psutil.virtual_memory()
    cpu_usage = psutil.cpu_percent(interval=1)

    write_log(f"üîç Memory ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ: {memory.percent:.2f}% | CPU ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ: {cpu_usage:.2f}%")

    if memory.percent > 90:
        write_log("‚ö†Ô∏è RAM ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 90%! ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á...")
        exit(1)

    if cpu_usage > 95:
        write_log("‚ö†Ô∏è CPU ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏¥‡∏ô 95%! ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Overload...")
        exit(1)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance`
def update_yfinance():
    write_log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
    subprocess.run(["pip", "install", "--upgrade", "yfinance"], check=True)
    write_log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
def run_scripts_for_market(market):
    write_log(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î {market} ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    # üîπ ‡πÅ‡∏¢‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î
    thai_scripts = [
        "./Thai_News_Database.py",
        "./Financial_Thai_Quarter.py",
        "./GetdataThaiStocks.py"
    ]

    america_scripts = [
        "./America_News_Database.py",
        "./Financial_America_Quarter.py",
        "./GetdataAmericanStock.py"
    ]

    common_scripts = [
        "./Final_News_Merge.py",
        "./Finbert.py",
        "./calculate_weighted_sentiment.py",
        "./News_Database.py",
        "./combine.py",
        "./Stock_Database.py",
        "./GDP_Database.py",
        "./Autotrainmodel.py"
    ]

    scripts_to_run = thai_scripts if market == "‡πÑ‡∏ó‡∏¢" else america_scripts
    scripts_to_run += common_scripts  # ‡∏£‡∏ß‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô

    def is_script_exist(script_path):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ script ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"""
        return os.path.isfile(script_path)

    for step, script in enumerate(scripts_to_run, start=1):
        write_log(f"\n--- Step {step}: Running `{script}` ---\n")

        if not is_script_exist(script):
            write_log(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `{script}` ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô...")
            continue

        try:
            # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Python ‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            write_log(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á Cache ‡∏Ç‡∏≠‡∏á `{script}`...")
            os.utime(script, None)

            # ‚úÖ ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î Timeout 10 ‡∏ô‡∏≤‡∏ó‡∏µ
            process = subprocess.run(
                [sys.executable, script],
                capture_output=True,
                text=True,
                encoding="utf-8",
                errors="ignore",
                timeout=600
            )

            stdout, stderr = process.stdout.strip(), process.stderr.strip()
            write_log(f"\nüìå Output ‡∏à‡∏≤‡∏Å `{script}`:\n{stdout}")
            if stderr:
                write_log(f"‚ö†Ô∏è Error ‡∏à‡∏≤‡∏Å `{script}`:\n{stderr}")

        except subprocess.TimeoutExpired:
            write_log(f"‚ö†Ô∏è Timeout: `{script}` ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        except Exception as e:
            write_log(f"‚ùå Error: `{script}` ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

        write_log(f"\n‚úÖ --- Step {step} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ---\n")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
def wait_until_next_run():
    now = datetime.now()

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô
    market_times = [
        (now.replace(hour=8, minute=30, second=0, microsecond=0), "‡πÑ‡∏ó‡∏¢"),
        (now.replace(hour=19, minute=30, second=0, microsecond=0), "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤")
    ]

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô
    next_run_time, market = None, None
    for market_time, market_name in market_times:
        if now < market_time:
            next_run_time, market = market_time, market_name
            break

    if next_run_time is None:
        next_run_time, market = market_times[0][0] + timedelta(days=1), market_times[0][1]

    wait_seconds = (next_run_time - now).total_seconds()

    write_log("\n\n\n" + "=" * 80 + "\n" * 5)  
    write_log(f"‚è≥ ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î {market} ‡∏≠‡∏µ‡∏Å {int(wait_seconds)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({next_run_time.strftime('%Y-%m-%d %H:%M:%S')})...\n")
    write_log("\n" * 5 + "=" * 80 + "\n\n\n")  

    time.sleep(wait_seconds)

# ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Process ‡∏Ñ‡πâ‡∏≤‡∏á
def kill_old_processes():
    write_log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Process ‡∏Ñ‡πâ‡∏≤‡∏á...")
    for proc in psutil.process_iter(attrs=['pid', 'name']):
        try:
            if "python" in proc.info['name'].lower():
                write_log(f"üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏¢‡∏∏‡∏î Process `{proc.info['name']}` (PID: {proc.info['pid']})")
                os.kill(proc.info['pid'], 9)
        except Exception as e:
            write_log(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î Process {proc.info['pid']}: {e}")

# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
update_yfinance()

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö
check_system_resources()

# ‚úÖ ‡∏•‡πâ‡∏≤‡∏á Process ‡∏Ñ‡πâ‡∏≤‡∏á
kill_old_processes()

# ‚úÖ ‡∏•‡∏π‡∏õ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏á‡∏£‡∏≠‡∏ö (‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢ + ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤)
while True:
    now = datetime.now()
    if now.hour < 12:  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤ ‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢
        run_scripts_for_market("‡πÑ‡∏ó‡∏¢")
    else:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
        run_scripts_for_market("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤")
    
    wait_until_next_run()

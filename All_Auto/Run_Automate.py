import subprocess
import sys
import os
import time
from datetime import datetime, timedelta

# ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ stdout ‡πÉ‡∏ä‡πâ UTF-8 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
sys.stdout.reconfigure(encoding="utf-8", errors="ignore")

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Log (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
log_file = "system_run.log"

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log (Append Mode)
def write_log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file, "a", encoding="utf-8") as log:
        log.write(f"[{timestamp}] {message}\n")
    print(message)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Console ‡∏î‡πâ‡∏ß‡∏¢

# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
def update_yfinance():
    try:
        write_log("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
        subprocess.run(["pip", "install", "--upgrade", "yfinance"], check=True, timeout=300)
        write_log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except subprocess.TimeoutExpired:
        write_log("‚ö†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Timeout)")
    except subprocess.CalledProcessError:
        write_log("‚ùå Error: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
def check_libraries():
    required_libraries = ["yfinance", "pandas", "tensorflow", "numpy"]  # ‚úÖ ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    installed_libs = subprocess.run(["pip", "list"], capture_output=True, text=True).stdout.lower()

    for lib in required_libraries:
        if lib.lower() not in installed_libs:
            try:
                write_log(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö {lib} ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...")
                subprocess.run(["pip", "install", lib], check=True, timeout=300)
                write_log(f"‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {lib} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except subprocess.TimeoutExpired:
                write_log(f"‚ö†Ô∏è ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {lib} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Timeout)")
            except subprocess.CalledProcessError:
                write_log(f"‚ùå Error: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á {lib} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
def run_script(script_path):
    """ ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á """
    if not os.path.isfile(script_path):
        write_log(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `{script_path}` ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô...")
        return

    try:
        write_log(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô `{script_path}`...")
        process = subprocess.Popen(
            [sys.executable, script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding="utf-8",
            errors="ignore"
        )

        try:
            stdout, stderr = process.communicate(timeout=600)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
        except subprocess.TimeoutExpired:
            process.kill()
            stdout, stderr = process.communicate()  # ‡∏î‡∏∂‡∏á log ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å kill
            write_log(f"‚ö†Ô∏è `{script_path}` ‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
        except Exception as e:
            write_log(f"‚ùå `{script_path}` ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return

        # ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log
        write_log(f"üìå Output ‡∏à‡∏≤‡∏Å `{script_path}`:\n{stdout}")
        if stderr:
            write_log(f"‚ö†Ô∏è Error ‡∏à‡∏≤‡∏Å `{script_path}`:\n{stderr}")

        if process.returncode != 0:
            write_log(f"‚ö†Ô∏è `{script_path}` ‡∏à‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ({process.returncode})")

        write_log(f"‚úÖ `{script_path}` ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")

    except Exception as e:
        write_log(f"‚ùå `{script_path}` ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
def run_scripts_for_market(market):
    write_log(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î {market} ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    scripts = {
        "‡πÑ‡∏ó‡∏¢": ["./Thai_News_Database.py", "./Financial_Thai_Quarter.py", "./GetdataThaiStocks.py"],
        "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤": ["./America_News_Database.py", "./Financial_America_Quarter.py", "./GetdataAmericanStock.py"],
        "common": ["./Final_News_Merge.py", "./Finbert.py", "./calculate_weighted_sentiment.py", "./News_Database.py",
                   "./combine.py", "./Stock_Database.py", "./GDP_Database.py", "./Autotrainmodel.py"]
    }

    scripts_to_run = scripts[market] + scripts["common"]

    for script in scripts_to_run:
        run_script(script)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤)
def wait_until_next_run():
    now = datetime.now()

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô
    market_times = [
        (now.replace(hour=8, minute=30, second=0, microsecond=0), "‡πÑ‡∏ó‡∏¢"),   # ‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢
        (now.replace(hour=19, minute=30, second=0, microsecond=0), "‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤")   # ‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
    ]

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô
    next_run_time, market = None, None
    for market_time, market_name in market_times:
        if now < market_time:
            next_run_time, market = market_time, market_name
            break

    # ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ
    if next_run_time is None:
        next_run_time, market = market_times[0][0] + timedelta(days=1), market_times[0][1]

    wait_seconds = (next_run_time - now).total_seconds()

    write_log("\n\n\n" + "=" * 80 + "\n" * 5)
    write_log(f"‚è≥ ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î {market} ‡∏≠‡∏µ‡∏Å {int(wait_seconds)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({next_run_time.strftime('%Y-%m-%d %H:%M:%S')})...\n")
    write_log("\n" * 5 + "=" * 80 + "\n\n\n")

    time.sleep(wait_seconds)

# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `yfinance` ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
update_yfinance()

# ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô
check_libraries()

# ‚úÖ ‡∏•‡∏π‡∏õ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏á‡∏£‡∏≠‡∏ö (‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢ + ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤)
try:
    while True:
        now = datetime.now()
        if now.hour < 12:  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤ ‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢
            run_scripts_for_market("‡πÑ‡∏ó‡∏¢")
        else:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤
            run_scripts_for_market("‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤")

        wait_until_next_run()
except KeyboardInterrupt:
    write_log("‚ùå ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢ `KeyboardInterrupt` ‚Üí ‡∏´‡∏¢‡∏∏‡∏î‡∏•‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å")

import pandas as pd
import sys
from datetime import datetime

# ‡πÄ‡∏≠‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î)
current_hour = datetime.now().hour

if 8 <= current_hour < 18:
    print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢...")
    sentiment_df = pd.read_csv("./News/daily_sentiment_result_th.csv")
    stock_df = pd.read_csv("./Stock/stock_data_thai.csv")
    financial_df = pd.read_csv("./Stock/Financial_Thai_Quarter.csv")
elif 19 <= current_hour or current_hour < 5:
    print("üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤...")
    sentiment_df = pd.read_csv("./News/daily_sentiment_result_us.csv")
    stock_df = pd.read_csv("./Stock/stock_data_usa.csv")
    financial_df = pd.read_csv("./Stock/Financial_America_Quarter.csv")
else:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤")
    sys.exit()

# ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
financial_df.columns = financial_df.columns.str.strip()

# rename "EV / EBITDA" -> "EVEBITDA"
financial_df.rename(columns={"EV / EBITDA": "EVEBITDA"}, inplace=True)

# --------------------
# (1) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame sentiment_df
# --------------------
# ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå sentiment_df ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Sentiment Category' ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 'Neutral'
if 'Sentiment Category' not in sentiment_df.columns:
    sentiment_df['Sentiment Category'] = 'Neutral'

# ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô rename 'Sentiment Category' -> 'Sentiment'
sentiment_df.rename(columns={"Sentiment Category": "Sentiment"}, inplace=True)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå date ‡πÄ‡∏õ‡πá‡∏ô datetime
sentiment_df["date"] = pd.to_datetime(sentiment_df["date"])

# --------------------
# (2) Merge sentiment ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö stock
# --------------------
stock_df["Date"] = pd.to_datetime(stock_df["Date"])
merged_df = stock_df.merge(
    sentiment_df[['date', 'Sentiment']],  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡∏û‡∏≠
    left_on='Date',
    right_on='date',
    how='left'
)
merged_df.drop(columns=['date'], inplace=True)  # ‡∏•‡∏ö date ‡∏ã‡πâ‡∏≥

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Quarter' ‡∏°‡∏µ‡πÑ‡∏´‡∏° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
if 'Quarter' not in merged_df.columns:
    merged_df['Quarter'] = merged_df['Date'].dt.to_period('Q').astype(str)

# --------------------
# (3) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame financial_df ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
# --------------------
financial_df.rename(columns={'Sentiment Category': 'Sentiment'}, inplace=True)  # <== ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå finance ‡∏°‡∏µ "Sentiment Category" ‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡πà‡∏≠‡∏¢ rename
columns_to_keep = [
    'Stock', 'Quarter', 'QoQ Growth (%)', 'Total Revenue', 'YoY Growth (%)', 
    'Net Profit', 'Earnings Per Share (EPS)', 'ROA (%)', 'ROE (%)', 'Gross Margin (%)', 
    'Net Profit Margin (%)', 'Debt to Equity (x)', 'P/E Ratio (x)', 'P/BV Ratio (x)', 
    'Dividend Yield (%)', 'EVEBITDA', 'MarketCap'
]
financial_df = financial_df[columns_to_keep]

def fix_quarter_format(quarter_str):
    quarter_str = str(quarter_str).strip()
    if len(quarter_str) == 6 and quarter_str[0].isdigit() and quarter_str[1] == "Q":
        return quarter_str[-4:] + "Q" + quarter_str[0]
    return quarter_str

def quarter_to_announcement_date(quarter_str):
    try:
        year, q = int(quarter_str[:4]), int(quarter_str[-1])
        quarter_dates = {1: "01-01", 2: "04-01", 3: "07-01", 4: "10-01"}
        if q == 4:
            year += 1
        return pd.Timestamp(f"{year}-{quarter_dates[q]}")
    except:
        return pd.NaT

financial_df.dropna(axis=1, how='all', inplace=True)
financial_df['Quarter'] = financial_df['Quarter'].apply(fix_quarter_format)
financial_df['Quarter Date'] = financial_df['Quarter'].apply(quarter_to_announcement_date)

# --------------------
# (4) Merge financial_df
# --------------------
merged_df = merged_df.merge(
    financial_df,
    left_on=['Ticker', 'Quarter'],
    right_on=['Stock', 'Quarter'],
    how='left'
)

# --------------------
# (5) ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Sentiment ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô NaN => Neutral
# --------------------
merged_df['Sentiment'] = merged_df['Sentiment'].fillna("Neutral")

# --------------------
# (6) ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå *Category* ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô merged_df ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ drop ‡πÑ‡∏î‡πâ)
# --------------------
for col in ['Sentiment Category', 'Sentiment Category_x', 'Sentiment Category_y']:
    if col in merged_df.columns:
        merged_df.drop(columns=[col], inplace=True)

# --------------------
# (7) ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞ Clean ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
# --------------------
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πá‡∏Ñ *_x, *_y
for col in merged_df.columns:
    if col.endswith('_x'):
        y_col = col.replace('_x', '_y')
        if y_col in merged_df.columns:
            merged_df[col] = merged_df[col].fillna(merged_df[y_col])
            merged_df.drop(columns=[y_col], inplace=True)

merged_df.columns = merged_df.columns.str.replace(r'(_x|\(x\))', '', regex=True)

front_columns = [col for col in ['Date', 'Ticker', 'Quarter Date'] if col in merged_df.columns]
other_columns = [col for col in merged_df.columns if col not in front_columns]
merged_df = merged_df[front_columns + other_columns]

def clean_data_based_on_dates(df):
    columns_to_clean = [
        'QoQ Growth (%)', 'Total Revenue', 'YoY Growth (%)', 'Net Profit', 
        'Earnings Per Share (EPS)', 'ROA (%)', 'ROE (%)', 'Gross Margin (%)', 
        'Net Profit Margin (%)', 'Debt to Equity (x)', 'P/E Ratio (x)', 'P/BV Ratio (x)', 
        'Dividend Yield (%)', 'Debt to Equity ', 'P/E Ratio ', 'P/BV Ratio ',
        'EVEBITDA'
    ]
    for col in columns_to_clean:
        if col in df.columns:
            df.loc[df['Date'] != df['Quarter Date'], col] = None
    return df

merged_df = clean_data_based_on_dates(merged_df)

financial_columns = [
    'QoQ Growth (%)', 'Total Revenue', 'YoY Growth (%)', 'Net Profit', 
    'Earnings Per Share (EPS)', 'ROA (%)', 'ROE (%)', 'Gross Margin (%)', 
    'Net Profit Margin (%)', 'Debt to Equity (x)', 'P/E Ratio (x)', 'P/BV Ratio (x)', 
    'Dividend Yield (%)', 'Debt to Equity ', 'P/E Ratio ', 'P/BV Ratio '
]

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà merged_df ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
valid_financial_cols = [col for col in financial_columns if col in merged_df.columns]

# ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô valid_financial_cols ‡πÅ‡∏ó‡∏ô financial_columns
merged_df = merged_df[
    ~(
        (merged_df['Close'] == 0)
        & (merged_df[valid_financial_cols].isna().all(axis=1))
    )
]

columns_to_remove = ["Debt to Equity (x)", "P/E Ratio (x)", "P/BV Ratio (x)", "Quarter"]
merged_df.drop(columns=columns_to_remove, errors='ignore', inplace=True)

# ‡πÄ‡∏ï‡∏¥‡∏° MarketCap ‡∏Å‡∏£‡∏ì‡∏µ Date == Quarter Date
if 'MarketCap' in merged_df.columns:
    merged_df['MarketCap'] = merged_df.apply(
        lambda row: row['MarketCap'] if row['Date'] == row['Quarter Date'] else None, axis=1
    )

merged_df.to_csv("merged_stock_sentiment_financial.csv", index=False)
print(merged_df.head())

# ‡πÄ‡∏ï‡∏¥‡∏° Quarter Date ‡∏´‡∏£‡∏∑‡∏≠ Stock ‡∏´‡∏≤‡∏Å‡∏Ç‡∏≤‡∏î
merged_df['Quarter Date'] = merged_df['Quarter Date'].fillna(
    merged_df['Date'].dt.to_period('Q').astype(str)
)
if 'Stock' in merged_df.columns:
    merged_df['Stock'] = merged_df['Stock'].fillna(merged_df['Ticker'])

print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏¥‡∏° Quarter Date ‡πÅ‡∏•‡∏∞ Stock:")
print(merged_df[['Date', 'Ticker', 'Quarter Date', 'Stock']].head())

merged_df.to_csv("merged_stock_sentiment_financial.csv", index=False)

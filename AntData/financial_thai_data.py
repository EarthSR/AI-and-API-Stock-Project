import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from webdriver_manager.chrome import ChromeDriverManager  # ‡πÉ‡∏ä‡πâ WebDriverManager
import re

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome options
options = Options()
options.add_argument('--headless')  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ UI
options.add_argument('--disable-gpu')
options.add_argument('--ignore-certificate-errors')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--blink-settings=imagesEnabled=false')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

# üîπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome driver ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î WebDriver...")
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)
print("‚úÖ WebDriver ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
def clean_year(value):
    if isinstance(value, str):
        match = re.search(r"\b(\d{2,4})\b", value)
        if match:
            year = int(match.group())
            if year > 2500:
                return str(year - 543)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    return value

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
column_translation = {
    "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°": "Total Revenue",
    "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (%)": "YoY Growth (%)",
    "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": "Net Profit",
    "‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (EPS)": "Earnings Per Share (EPS)",
    "‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏£‡∏ß‡∏°": "Total Assets",
    "‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏£‡∏ß‡∏°": "Total Liabilities",
    "‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô": "Shareholder Equity",
    "‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô": "Gross Profit",
    "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£": "Selling & Admin Expenses",
    "‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢": "Depreciation & Amortization",
    "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô": "Operating Cash Flow",
    "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô": "Investing Cash Flow",
    "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô": "Financing Cash Flow",
    "‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø)": "EPS (USD)",
    "ROA (%)": "ROA (%)",
    "ROE (%)": "ROE (%)",
    "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô (%)": "Gross Margin (%)",
    "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (%)": "Selling & Admin Expense to Revenue (%)",
    "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (%)": "Net Profit Margin (%)",
    "‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô/‡∏ó‡∏∏‡∏ô (‡πÄ‡∏ó‡πà‡∏≤)": "Debt to Equity (x)",
    "‡∏ß‡∏á‡∏à‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î (‡∏ß‡∏±‡∏ô)": "Cash Cycle (Days)",
    "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø)": "Last Price (USD)",
    "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î (‡∏•‡πâ‡∏≤‡∏ô‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø)": "Market Cap (Million USD)",
    "P/E (‡πÄ‡∏ó‡πà‡∏≤)": "P/E Ratio (x)",
    "P/BV (‡πÄ‡∏ó‡πà‡∏≤)": "P/BV Ratio (x)",
    "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏Ø)": "Book Value Per Share (USD)",
    "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô(%)": "Dividend Yield (%)",
    "EV / EBITDA": "EV / EBITDA"
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
def translate_columns(df, translation_dict):
    df.columns = [translation_dict.get(col, col) for col in df.columns]
    return df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def fetch_full_financial_data(stock):
    url = f"https://www.finnomena.com/stock/{stock}"

    print(f"üåç ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö: {url}")
    driver.get(url)

    try:
        # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î...")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "a-toggle-switchtext"))
        )
        print("‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

        # ‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™" ‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏µ"
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏µ' ...")
        toggle_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//div[@data-alias="btn_growth_summary_year"]'))
        )
        driver.execute_script("arguments[0].click();", toggle_button)
        print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏µ' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

        # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡πÇ‡∏´‡∏•‡∏î
        print("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡πÇ‡∏´‡∏•‡∏î...")
        time.sleep(3)
        print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

        # ‚úÖ ‡∏î‡∏∂‡∏á HTML ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
        soup = BeautifulSoup(driver.page_source, "html.parser")

        # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        tables = soup.find_all("table")

        if not tables:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á {stock}!")
            return None

        print(f"‚úÖ ‡∏û‡∏ö {len(tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")

        all_data = []

        # üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        for table in tables:
            rows = table.find_all("tr")
            years = [th.text.strip() for th in rows[0].find_all("th")[1:] if "256" in th.text]
            values_dict = {year: [] for year in years}

            for row in rows[1:]:
                cols = row.find_all("td")
                metric_name = cols[0].text.strip()
                for year, col in zip(years, cols[1:]):
                    value = col.text.strip().replace(",", "")
                    try:
                        values_dict[year].append(float(value))  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                    except ValueError:
                        values_dict[year].append(value)  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
            df = pd.DataFrame(values_dict, index=[row.find("td").text.strip() for row in rows[1:]]).T
            df.insert(0, "Stock", stock)
            df.insert(1, "Year", df.index)
            df.reset_index(drop=True, inplace=True)

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
            df['Year'] = df['Year'].apply(clean_year)
            all_data.append(df)

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
        full_df = pd.concat(all_data, axis=1).loc[:, ~pd.concat(all_data, axis=1).columns.duplicated()]

        # ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        full_df = full_df.loc[:, ~full_df.columns.duplicated()]

        # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏ô‡∏ñ‡∏∂‡∏á "EV / EBITDA"
        columns_to_keep = []
        keep = False
        for col in full_df.columns:
            columns_to_keep.append(col)
            if "EV / EBITDA" in col:
                break

        columns_to_keep = ['Stock', 'Year'] + columns_to_keep[2:]  # ‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° 'Year' ‡∏ã‡πâ‡∏≥
        full_df = full_df[columns_to_keep]

        # ‚úÖ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà "N/A" ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (null)
        full_df = full_df.replace("N/A", "")

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        full_df = translate_columns(full_df, column_translation)

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
        full_df = full_df.sort_values(by="Year", ascending=False)

        # ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ Stock & Year ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        columns_order = ["Stock", "Year"] + [col for col in full_df.columns if col not in ["Stock", "Year"]]
        full_df = full_df[columns_order]

        print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return full_df

    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {stock}: {e}")
        return None

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
stocks = ["ADVANC", "INTUCH", "TRUE", "DITTO", "DIF", "INSET", "JMART", "INET", "JAS", "HUMAN"]
all_dfs = []

for stock in stocks:
    print(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {stock}...")
    df = fetch_full_financial_data(stock)
    if df is not None:
        all_dfs.append(df)

# ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏∏‡πâ‡∏ô
final_df = pd.concat(all_dfs, ignore_index=True)

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á CSV
final_df.to_csv("financial_thai_data.csv", index=False, encoding="utf-8-sig")
print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á 'financial_thai_data.csv' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‚úÖ ‡∏õ‡∏¥‡∏î WebDriver
driver.quit()
print("üõë ‡∏õ‡∏¥‡∏î WebDriver ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

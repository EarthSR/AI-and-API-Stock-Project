import time
import pandas as pd
import re
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from webdriver_manager.chrome import ChromeDriverManager

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome options
options = Options()
options.add_argument('--headless')
options.add_argument('--disable-gpu')
options.add_argument('--ignore-certificate-errors')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--blink-settings=imagesEnabled=false')

# üîπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Chrome driver
print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î WebDriver...")
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=options)
print("‚úÖ WebDriver ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏µ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
def clean_year(value):
    if isinstance(value, str):
        # üîπ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "11 ‡∏Å.‡∏û. 68" ‚Üí ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ
        match = re.search(r"\b(\d{2,4})\b", value)
        if match:
            year = int(match.group())
            
            # üîπ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2500) ‚Üí ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
            if year > 2500:
                return str(year - 543)

            # üîπ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏û.‡∏®.
            elif 50 <= year <= 99:  # 68 ‚Üí 2568 ‚Üí 2025
                return str(1900 + year)

            elif 0 <= year <= 49:  # 25 ‚Üí 2025, 30 ‚Üí 2030
                return str(2000 + year)

        return None  # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏õ‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    return value

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def fetch_full_financial_data(stock):
    url = f"https://www.finnomena.com/stock/{stock}.US"
    print(f"üåç ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö: {url}")
    driver.get(url)

    try:
        # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î...")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "a-toggle-switchtext"))
        )
        print("‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

        # ‚úÖ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏õ‡∏µ"
        try:
            print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏µ' ...")
            toggle_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//div[@data-alias="btn_growth_summary_year"]'))
            )
            driver.execute_script("arguments[0].click();", toggle_button)
            print("‚úÖ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏µ' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            time.sleep(3)
        except:
            print(f"‚ö†Ô∏è ‡∏´‡∏∏‡πâ‡∏ô {stock} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô '‡∏õ‡∏µ' ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

        # ‚úÖ ‡∏î‡∏∂‡∏á HTML ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
        soup = BeautifulSoup(driver.page_source, "html.parser")

        # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        tables = soup.find_all("table")

        if not tables:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {stock}!")
            return None

        print(f"‚úÖ ‡∏û‡∏ö {len(tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")

        all_data = []

        # üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        for table in tables:
            rows = table.find_all("tr")
            headers = [th.text.strip() for th in rows[0].find_all("th")[1:]]
            if not any("256" in h or "20" in h for h in headers):
                continue

            years = []
            for header in headers:
                clean_header = clean_year(header)  # üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                if clean_header:
                    years.append(clean_header)

            values_dict = {year: [] for year in years}

            for row in rows[1:]:
                cols = row.find_all("td")
                metric_name = cols[0].text.strip()
                for year, col in zip(years, cols[1:]):
                    value = col.text.strip().replace(",", "")

                    try:
                        values_dict[year].append(float(value)) if value else values_dict[year].append(None)
                    except ValueError:
                        values_dict[year].append(value)

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
            df = pd.DataFrame(values_dict, index=[row.find("td").text.strip() for row in rows[1:]]).T
            df.insert(0, "Stock", stock)
            df.insert(1, "Year", df.index)
            df.reset_index(drop=True, inplace=True)

            all_data.append(df)

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
        if all_data:
            full_df = pd.concat(all_data, axis=1).loc[:, ~pd.concat(all_data, axis=1).columns.duplicated()]
            full_df = full_df.sort_values(by="Year", ascending=False)

            # ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ Stock & Year ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
            columns_order = ["Stock", "Year"] + [col for col in full_df.columns if col not in ["Stock", "Year"]]
            full_df = full_df[columns_order]

            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {stock} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return full_df

    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {stock}: {e}")
        return None

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
stocks = ["AAPL", "MSTF", "NVDA", "AMZN", "GOOG", "META", "TSLA", "AVGO", "TSM", "AMD "]
all_dfs = []

for stock in stocks:
    print(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {stock}...")
    df = fetch_full_financial_data(stock)
    if df is not None:
        all_dfs.append(df)

# ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏∏‡πâ‡∏ô
final_df = pd.concat(all_dfs, ignore_index=True)

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á CSV
final_df.to_csv("financial_america_data.csv", index=False, encoding="utf-8-sig")
print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á 'financial_america_data.csv' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‚úÖ ‡∏õ‡∏¥‡∏î WebDriver
driver.quit()
print("üõë ‡∏õ‡∏¥‡∏î WebDriver ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

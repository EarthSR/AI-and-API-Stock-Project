import numpy as np
import pandas as pd
import joblib
import xgboost as xgb
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import RobustScaler

# ‚úÖ 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
train_features = np.load('../RNN_Model/train_features.npy')
train_targets = np.load('../RNN_Model/train_targets.npy')
test_features = np.load('../RNN_Model/test_features.npy')
test_targets = np.load('../RNN_Model/test_targets.npy')

# ‚úÖ 2. ‡πÉ‡∏ä‡πâ RobustScaler ‡∏Å‡∏±‡∏ö Target
scaler_target = RobustScaler()
y_train_scaled = scaler_target.fit_transform(train_targets.reshape(-1, 1))
y_test_scaled = scaler_target.transform(test_targets.reshape(-1, 1))

# ‚úÖ 3. ‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
X_train, y_train = train_features, y_train_scaled
X_test, y_test = test_features, y_test_scaled

print(f"‚úÖ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∏‡∏î Train: {X_train.shape}, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∏‡∏î Test: {X_test.shape}")

# ‚úÖ 4. ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
xgb_params = {
    "n_estimators": 5000,
    "learning_rate": 0.001,  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    "max_depth": 8,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    "min_child_weight": 5,  # ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î overfitting
    "subsample": 0.85,
    "colsample_bytree": 0.85,
    "gamma": 0.2,  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô overfitting
    "objective": "reg:squarederror",
    "eval_metric": "rmse",
    "random_state": 42
}

# ‚úÖ 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á DMatrix
dtrain = xgb.DMatrix(X_train, label=y_train)
dtest = xgb.DMatrix(X_test, label=y_test)

# ‚úÖ 6. ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡∏û‡∏£‡πâ‡∏≠‡∏° Early Stopping
xgb_model = xgb.train(
    xgb_params,
    dtrain,
    num_boost_round=5000,
    evals=[(dtest, "Test")],
    early_stopping_rounds=50,
    verbose_eval=True
)

print("‚úÖ ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‚úÖ 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
joblib.dump(xgb_model, 'xgb_meta_learner.pkl')
joblib.dump(scaler_target, '../RNN_Model/scaler_target_xgb.pkl')  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å scaler ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö XGBoost
print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• XGBoost ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‚úÖ 8. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
y_pred_xgb = xgb_model.predict(dtest)

# ‚úÖ 9. ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÄ‡∏Å‡∏•‡∏à‡∏£‡∏¥‡∏á
y_pred_actual = scaler_target.inverse_transform(y_pred_xgb.reshape(-1, 1))
y_test_actual = scaler_target.inverse_transform(y_test.reshape(-1, 1))

# ‚úÖ 10. ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á
y_pred_actual = np.clip(y_pred_actual, np.min(y_test_actual), np.max(y_test_actual))

# ‚úÖ 11. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
print("\nüîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:")
print("Actual:", y_test_actual[:5].flatten())
print("Predicted:", y_pred_actual[:5].flatten())

print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î-‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:")
print("Min Actual:", np.min(y_test_actual), "Max Actual:", np.max(y_test_actual))
print("Min Predicted:", np.min(y_pred_actual), "Max Predicted:", np.max(y_pred_actual))

# ‚úÖ 12. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Metrics
valid_mask = (np.abs(y_test_actual - y_pred_actual) < 2 * np.std(y_test_actual))

mae = mean_absolute_error(y_test_actual[valid_mask], y_pred_actual[valid_mask])
mse = mean_squared_error(y_test_actual[valid_mask], y_pred_actual[valid_mask])
rmse = np.sqrt(mse)

# ‚úÖ 13. ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì MAPE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Error ‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
mape = np.mean(np.abs((y_test_actual - y_pred_actual) / (np.abs(y_test_actual) + 1))) * 100
r2 = r2_score(y_test_actual[valid_mask], y_pred_actual[valid_mask])

print(f"\n‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå XGBoost")
print(f"MAE: {mae:.4f}")
print(f"MSE: {mse:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"MAPE: {mape:.4f}%")
print(f"R2 Score: {r2:.4f}")

# ‚úÖ 14. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á CSV
results_df = pd.DataFrame({
    'Actual': y_test_actual.flatten(),
    'Predicted': y_pred_actual.flatten()
})

results_df.to_csv('xgboost_predictions.csv', index=False)
print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå 'xgboost_predictions.csv' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

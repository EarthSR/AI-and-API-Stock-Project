import pymysql
import requests
import json
from settrade_v2 import Investor

# üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢ (Settrade v2)
SETTRADE_APP_ID = "2DaswIgiipmhvNAf"
SETTRADE_APP_SECRET = "PFjxcryxZol0qmuCCGslg60D/H1djOOrooqw0vmgLMs="
SETTRADE_BROKER_ID = "SANDBOX"  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô "SIT", "KSEC", "BLS"
SETTRADE_APP_CODE = "SANDBOX"
SETTRADE_ACC_NO = "earthsr-E"

# üìå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Settrade API
try:
    investor = Investor(
        app_id=SETTRADE_APP_ID,
        app_secret=SETTRADE_APP_SECRET,
        broker_id=SETTRADE_BROKER_ID,
        app_code=SETTRADE_APP_CODE,
        is_auto_queue=True  # ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Queue
    )
    thai_account = investor.Equity(account_no=SETTRADE_ACC_NO)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Settrade API ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    account_info = thai_account.get_account_info()
    print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Settrade API:", account_info)

except Exception as e:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Settrade API:", str(e))
    exit()  # ‚ùå ‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

# üìå ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MySQL
conn = pymysql.connect(
    host="10.10.50.62",
    user="trademine",
    password="trade789",
    database="TradeMine",
    port=3306
)
cursor = conn.cursor()

# üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏∏‡πâ‡∏ô
query = """
SELECT s.StockDetailID, s.StockSymbol, COALESCE(st.Market, 'UNKNOWN') AS Market, 
       s.PredictionTrend, s.PredictionClose 
FROM StockDetail s
JOIN Stock st ON s.StockSymbol = st.StockSymbol
INNER JOIN (
    SELECT StockSymbol, MAX(Date) AS LatestDate 
    FROM StockDetail 
    GROUP BY StockSymbol
) latest ON s.StockSymbol = latest.StockSymbol AND s.Date = latest.LatestDate
WHERE s.PredictionTrend IS NOT NULL AND s.PredictionClose IS NOT NULL 
LIMIT 10;
"""
cursor.execute(query)
stocks = cursor.fetchall()

def get_settrade_price(stock_symbol):
    try:
        market_data = investor.MarketData()
        print(f"üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API: {market_data}")

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏° ".BK"
        quote = market_data.get_quote_symbol(stock_symbol)

        # ‚úÖ Debug Data
        print(f"üìå Debug Data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {stock_symbol}: {repr(quote)}")

        # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if isinstance(quote, dict):
            if quote.get("marketStatus") == "Close":
                print(f"‚ö†Ô∏è ‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {stock_symbol}")
                return None
            if "last" in quote and quote["last"] is not None:
                return float(quote["last"])
            else:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {stock_symbol}, ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢")
                return None
        else:
            print(f"‚ùå API ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON: {repr(quote)}")
            return None

    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢ {stock_symbol}: {str(e)}")
        return None

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ú‡πà‡∏≤‡∏ô Settrade
def execute_settrade_trade(stock_symbol, trade_type, quantity):
    try:
        order_result = thai_account.place_order(
            symbol=f"{stock_symbol}.BK",
            side=trade_type.lower(),
            quantity=quantity,
            price="MP",  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î (Market Price)
            validity="GTC"
        )
        return order_result
    except Exception as e:
        print(f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {trade_type} ‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢ {stock_symbol} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
        return None

# üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏•‡∏á `TradeHistory`
def log_trade(stock_symbol, trade_type, quantity, predicted_price, actual_price, status):
    total_trade_value = quantity * actual_price if actual_price else None
    profit_loss = (actual_price - predicted_price) * quantity if actual_price else None
    trade_fee = total_trade_value * 0.001 if total_trade_value else None  # ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° 0.1%
    vat = trade_fee * 0.07 if trade_fee else None  # ‚úÖ ‡∏†‡∏≤‡∏©‡∏µ 7% ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°

    query = """
    INSERT INTO TradeHistory (TradeType, Quantity, Price, ActualPrice, 
                              TotalTradeValue, ProfitLoss, TradeFee, VAT, TradeStatus)
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);
    """
    cursor.execute(query, (trade_type, quantity, predicted_price, actual_price, 
                           total_trade_value, profit_loss, trade_fee, vat, status))
    conn.commit()
    print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {trade_type} {stock_symbol} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {quantity} ‡∏´‡∏∏‡πâ‡∏ô @ {actual_price} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

# üìå ‡πÄ‡∏£‡∏¥‡πà‡∏° Trade Logic
STOP_LOSS_THRESHOLD = 0.98  # 2% loss
TAKE_PROFIT_THRESHOLD = 1.05  # 5% gain

for stock in stocks:
    stock_id, stock_symbol, market, prediction_trend, prediction_close = stock

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢
    if market.lower() != "thailand":
        continue

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    market_price = get_settrade_price(stock_symbol)

    if market_price is None:
        continue

    # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
    trade_decision = "HOLD"
    trade_quantity = 10

    if prediction_trend > 0 and prediction_close > market_price:
        if market_price <= prediction_close * STOP_LOSS_THRESHOLD:
            trade_decision = "SELL"  # Stop Loss
        else:
            trade_decision = "BUY"
    elif prediction_trend < 0 and prediction_close < market_price:
        if market_price >= prediction_close * TAKE_PROFIT_THRESHOLD:
            trade_decision = "BUY"  # Take Profit
        else:
            trade_decision = "SELL"

    # üìå ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
    if trade_decision in ["BUY", "SELL"]:
        trade_response = execute_settrade_trade(stock_symbol, trade_decision, trade_quantity)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏•‡∏á `TradeHistory`
        if trade_response:
            log_trade(stock_symbol, trade_decision, trade_quantity, prediction_close, market_price, "SUCCESS")
        else:
            log_trade(stock_symbol, trade_decision, trade_quantity, prediction_close, None, "FAILED")

# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Database
conn.close()
print("‚úÖ Auto Trade Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

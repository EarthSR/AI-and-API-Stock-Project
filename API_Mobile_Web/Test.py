import requests

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Sandbox
ALPACA_API_KEY = "CK4IA1P74HGAOCJ7S6IT"
ALPACA_SECRET_KEY = "bRoiiplob9Toute5pia1pL6pd8aPbSCvm7Qq1uBj"
ALPACA_BASE_URL = "https://broker-api.sandbox.alpaca.markets"

HEADERS_ALPACA = {
    "APCA-API-KEY-ID": ALPACA_API_KEY,
    "APCA-API-SECRET-KEY": ALPACA_SECRET_KEY,
    "Content-Type": "application/json"
}

# üìå ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
def test_sandbox_api():
    url = f"{ALPACA_BASE_URL}/v1/accounts"
    response = requests.get(url, headers=HEADERS_ALPACA)
    
    if response.status_code == 200:
        print("‚úÖ API Key ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:", response.json())
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {response.status_code}, {response.json()}")

# üìå ‚úÖ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Sandbox
def create_sandbox_account():
    url = f"{ALPACA_BASE_URL}/v1/accounts"
    
    account_data = {
        "contact": {
            "email_address": "testuser@example.com",
            "phone_number": "+1234567890",
            "street_address": ["123 Test Street"],
            "city": "Testville",
            "state": "CA",
            "postal_code": "12345",
            "country": "USA"
        },
        "identity": {
            "given_name": "John",
            "family_name": "Doe",
            "date_of_birth": "1990-01-01",
            "tax_id": "123-45-6789",
            "tax_id_type": "USA_SSN",
            "country_of_citizenship": "USA",
            "country_of_birth": "USA",
            "country_of_tax_residence": "USA",
            "funding_source": ["employment_income"]
        },
        "disclosures": {
            "is_control_person": False,
            "is_affiliated_exchange_or_finra": False,
            "is_politically_exposed": False,
            "immediate_family_exposed": False
        },
        "agreements": [
            {"agreement": "customer_agreement", "signed_at": "2025-03-10T00:00:00Z", "ip_address": "127.0.0.1"},
            {"agreement": "margin_agreement", "signed_at": "2025-03-10T00:00:00Z", "ip_address": "127.0.0.1"},
            {"agreement": "option_agreement", "signed_at": "2025-03-10T00:00:00Z", "ip_address": "127.0.0.1"}
        ]
    }

    response = requests.post(url, json=account_data, headers=HEADERS_ALPACA)
    
    if response.status_code == 201:
        print("‚úÖ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Sandbox ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:", response.json())
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Sandbox: {response.status_code}, {response.json()}")

# üìå ‚úÖ 3. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô Sandbox
def get_all_accounts():
    url = f"{ALPACA_BASE_URL}/v1/accounts"
    response = requests.get(url, headers=HEADERS_ALPACA)

    if response.status_code == 200:
        print("‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", response.json())
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: {response.status_code}, {response.json()}")

# üìå ‚úÖ 4. ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Sandbox
def deposit_funds(account_id, amount):
    url = f"{ALPACA_BASE_URL}/v1/accounts/{account_id}/transfers"
    
    deposit_data = {
        "amount": str(amount),
        "direction": "INCOMING",
        "timing": "IMMEDIATE"
    }

    response = requests.post(url, json=deposit_data, headers=HEADERS_ALPACA)

    if response.status_code == 201:
        print(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô {amount} USD ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ {account_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.json())
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô: {response.status_code}, {response.json()}")

# üìå ‚úÖ 5. ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ
def get_assets():
    url = f"{ALPACA_BASE_URL}/v1/assets"
    response = requests.get(url, headers=HEADERS_ALPACA)

    if response.status_code == 200:
        print("‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ:", response.json())
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå: {response.status_code}, {response.json()}")

# üìå ‚úÖ 6. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô Sandbox
def place_trade(account_id, stock_symbol, trade_type, quantity):
    url = f"{ALPACA_BASE_URL}/v1/trading/accounts/{account_id}/orders"

    trade_payload = {
        "symbol": stock_symbol,
        "qty": quantity,
        "side": trade_type.lower(),
        "type": "market",
        "time_in_force": "gtc"
    }

    response = requests.post(url, json=trade_payload, headers=HEADERS_ALPACA)

    if response.status_code == 201:
        print(f"‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {trade_type} {stock_symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.json())
    else:
        print(f"‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {trade_type} {stock_symbol} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.status_code}, {response.json()}")

# üìå ‚úÖ 7. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
def get_orders(account_id):
    url = f"{ALPACA_BASE_URL}/v1/trading/accounts/{account_id}/orders"
    response = requests.get(url, headers=HEADERS_ALPACA)

    if response.status_code == 200:
        print("‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß:", response.json())
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢: {response.status_code}, {response.json()}")

# üìå üî• ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if __name__ == "__main__":
    # üîπ 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Key ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    test_sandbox_api()
    
    # üîπ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Sandbox
    create_sandbox_account()
    
    # üîπ 3. ‡∏î‡∏∂‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    get_all_accounts()

    # üîπ 4. ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Sandbox (‡πÉ‡∏™‡πà account_id ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
    # deposit_funds("ACCOUNT_ID_HERE", 100000)

    # üîπ 5. ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ
    # get_assets()

    # üîπ 6. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô
    # place_trade("ACCOUNT_ID_HERE", "AAPL", "BUY", 10)

    # üîπ 7. ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
    # get_orders("ACCOUNT_ID_HERE")

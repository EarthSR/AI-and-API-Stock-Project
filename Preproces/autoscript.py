import os
import sys
import time
import datetime
import pandas as pd
import subprocess
import threading
import json
import logging
import platform
from plyer import notification  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ plyer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('script_log.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
def safe_notify(title, message, app_name, timeout):
    max_length = 256
    if len(message) > max_length:
        message = message[:max_length-3] + "..."  # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ...
        logger.warning(f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô {max_length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏ï‡∏±‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {message}")
    notification.notify(  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å safe_notify ‡πÄ‡∏õ‡πá‡∏ô notification.notify
        title=title,
        message=message,
        app_name=app_name,
        timeout=timeout
    )
# ‚úÖ ‡πÅ‡∏û‡∏ï‡∏ä‡πå undetected_chromedriver ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
try:
    import undetected_chromedriver as uc

    def patched_del(self):
        pass

    uc.Chrome.__del__ = patched_del
    logger.info("‚úÖ ‡πÅ‡∏û‡∏ï‡∏ä‡πå undetected_chromedriver ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    safe_notify(
        title="System Info",
        message="‡πÅ‡∏û‡∏ï‡∏ä‡πå undetected_chromedriver ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        app_name="Stock Data Updater",
        timeout=10
    )
except ImportError:
    logger.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö undetected_chromedriver - ‡∏Ç‡πâ‡∏≤‡∏°")
    safe_notify(
        title="System Info",
        message="‡πÑ‡∏°‡πà‡∏û‡∏ö undetected_chromedriver - ‡∏Ç‡πâ‡∏≤‡∏°",
        app_name="Stock Data Updater",
        timeout=10
    )

# ‚úÖ ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
SCRIPTS = {
    "news_us": {
        "get_news": ["./usa/getnewsUSA.py"],
        "ticker_news": ["./usa/ticker_news_USA.py"],
        "finbert_news": ["./usa/Finbert_News_USA.py"],
        "news_to_database": ["./usa/news_to_database_US.py"]
    },
    "news_th": {
        "get_news": ["./thai/getnewsThai.py"],
        "ticker_news": ["./thai/ticker_news_Thai.py"],
        "finbert_news": ["./thai/Finbert_News_Thai.py"],
        "news_to_database": ["./thai/news_to_database_TH.py"]
    },
    "stock_us": {
        "get_stock": ["./usa/GetdataAmericanStock.py"],
        "get_financial": ["./usa/GetFinancialUSA.py"],
        "daily_sentiment": ["./usa/dailysentiment_USA.py"],
        "combine_all": ["./usa/combineall_USA.py"],
        "stock_to_database": ["./usa/stock_to_database_USA.py"]
    },
    "stock_th": {
        "get_stock": ["./thai/GetdataThaiStocks.py"],
        "get_financial": ["./thai/GetFinancialThai.py"],
        "daily_sentiment": ["./thai/dailysentiment_Thai.py"],
        "combine_all": ["./thai/combineall_Thai.py"],
        "stock_to_database": ["./thai/stock_to_database_Thai.py"]
    }
}

def update_chrome():
    system = platform.system()

    if system == "Windows":
        logger.info("Updating Chrome on Windows...")
        subprocess.run(["powershell", "-Command", "Start-ScheduledTask -TaskName 'GoogleUpdateTaskMachineUA'"], check=True)
        safe_notify(
            title="Chrome Update",
            message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Chrome ‡∏ö‡∏ô Windows ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            app_name="Stock Data Updater",
            timeout=10
        )

    elif system == "Linux":
        logger.info("Updating Chrome on Linux...")
        subprocess.run(["sudo", "apt", "update"], check=True)
        subprocess.run(["sudo", "apt", "--only-upgrade", "install", "google-chrome-stable", "-y"], check=True)
        safe_notify(
            title="Chrome Update",
            message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Chrome ‡∏ö‡∏ô Linux ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            app_name="Stock Data Updater",
            timeout=10
        )

    elif system == "Darwin":
        logger.info("Updating Chrome on macOS...")
        subprocess.run(["brew", "update"], check=True)
        subprocess.run(["brew", "upgrade", "--cask", "google-chrome"], check=True)
        safe_notify(
            title="Chrome Update",
            message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Chrome ‡∏ö‡∏ô macOS ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            app_name="Stock Data Updater",
            timeout=10
        )

    else:
        logger.error("OS not supported.")
        safe_notify(
            title="Chrome Update Error",
            message="‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö",
            app_name="Stock Data Updater",
            timeout=10
        )
        sys.exit(1)

def update_yfinance():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    try:
        logger.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance...")
        result = subprocess.run(
            ["pip", "install", "--upgrade", "yfinance"], 
            capture_output=True, 
            text=True, 
            timeout=300
        )
        if result.returncode == 0:
            logger.info("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            safe_notify(
                title="yfinance Update",
                message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                app_name="Stock Data Updater",
                timeout=10
            )
            return True
        else:
            logger.error(f"‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.stderr}")
            safe_notify(
                title="yfinance Update Error",
                message=f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.stderr}",
                app_name="Stock Data Updater",
                timeout=10
            )
            return False
    except subprocess.TimeoutExpired:
        logger.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤")
        safe_notify(
            title="yfinance Update Error",
            message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤",
            app_name="Stock Data Updater",
            timeout=10
        )
        return False
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance: {e}")
        safe_notify(
            title="yfinance Update Error",
            message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï yfinance: {e}",
            app_name="Stock Data Updater",
            timeout=10
        )
        return False

def validate_script_exists(script_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"""
    if not os.path.exists(script_path):
        logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {script_path}")
        safe_notify(
            title="Script Error",
            message=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå: {script_path}",
            app_name="Stock Data Updater",
            timeout=10
        )
        return False
    return True

def run_scripts(scripts, group_name, critical=True):
    logger.info(f"\n‚ñ∂Ô∏è Running {group_name}...")
    
    for script in scripts:
        if not validate_script_exists(script):
            if critical:
                logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå: {script}")
                safe_notify(
                    title="Script Error",
                    message=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå: {script}",
                    app_name="Stock Data Updater",
                    timeout=10
                )
                return False
            else:
                logger.warning(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö: {script}")
                continue
        
        logger.info(f"  ‚Üí Running: {script}")
        
        try:
            result = subprocess.run(
                [sys.executable, script],
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace',
                timeout=300  # ‡∏ï‡∏±‡πâ‡∏á timeout ‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            )
            if result.stdout.strip():
                logger.info(f"Output from {script}:\n{result.stdout}")
            if result.stderr.strip():
                logger.info(f"Stderr from {script}:\n{result.stderr}")
            
            if result.returncode == 0:
                logger.info(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {script}")
                safe_notify(
                    title="Script Success",
                    message=f"‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå {script} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                    app_name="Stock Data Updater",
                    timeout=10
                )
            else:
                logger.error(f"‚ùå Script failed: {script} (returncode: {result.returncode})")
                safe_notify(
                    title="Script Failed",
                    message=f"‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå {script} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.stderr}"[:253] + "..." if len(result.stderr) > 253 else f"‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå {script} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.stderr}",
                    app_name="Stock Data Updater",
                    timeout=10
                )
                if critical:
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ï‡πà‡∏≠")
                    
        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå Script timeout: {script}")
            safe_notify(
                title="Script Timeout",
                message=f"‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå {script} ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤",
                app_name="Stock Data Updater",
                timeout=10
            )
            if critical:
                return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error running {script}: {e}")
            safe_notify(
                title="Unexpected Error",
                message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô {script}: {e}",
                app_name="Stock Data Updater",
                timeout=10
            )
            if critical:
                return False
    
    logger.info(f"‚úÖ Done: {group_name}")
    safe_notify(
        title="Group Completed",
        message=f"‡∏Å‡∏•‡∏∏‡πà‡∏° {group_name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
        app_name="Stock Data Updater",
        timeout=10
    )
    return True

def run_all_news_scripts():
    """‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    logger.info("üóûÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß...")
    safe_notify(
        title="News Update",
        message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß...",
        app_name="Stock Data Updater",
        timeout=10
    )
    
    # ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏´‡∏£‡∏±‡∏ê - ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
    if not run_scripts(SCRIPTS["news_us"]["get_news"], "Get News US", critical=True):
        logger.error("‚ùå Failed to fetch US news - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        safe_notify(
            title="News Update Error",
            message="‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
            app_name="Stock Data Updater",
            timeout=10
        )
        return False
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏´‡∏£‡∏±‡∏ê - ‡πÑ‡∏°‡πà critical
    run_scripts(SCRIPTS["news_us"]["ticker_news"], "Match Tickers US", critical=False)
    run_scripts(SCRIPTS["news_us"]["finbert_news"], "FinBERT Sentiment US", critical=False)
    run_scripts(SCRIPTS["news_us"]["news_to_database"], "News to Database US", critical=False)

    # ‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢ - ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≠‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    if run_scripts(SCRIPTS["news_th"]["get_news"], "Get News TH", critical=False):
        run_scripts(SCRIPTS["news_th"]["ticker_news"], "Match Tickers TH", critical=False)
        run_scripts(SCRIPTS["news_th"]["finbert_news"], "FinBERT Sentiment TH", critical=False)
        run_scripts(SCRIPTS["news_th"]["news_to_database"], "News to Database TH", critical=False)
    else:
        logger.warning("‚ö†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
        safe_notify(
            title="News Update Warning",
            message="‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
            app_name="Stock Data Updater",
            timeout=10
        )
    
    return True

def clear_stock_csv():
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    folder_paths = ["./usa/News", "./usa", "./thai/News", "./thai"]
    deleted_count = 0
    
    for folder in folder_paths:
        if not os.path.exists(folder) or not os.path.isdir(folder):
            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder}")
            safe_notify(
                title="Folder Error",
                message=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder}",
                app_name="Stock Data Updater",
                timeout=10
            )
            continue
            
        try:
            csv_files = [f for f in os.listdir(folder) if f.endswith(".csv")]
            for file in csv_files:
                file_path = os.path.join(folder, file)
                try:
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                        logger.info(f"üóë ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
                        deleted_count += 1
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path}: {e}")
                    safe_notify(
                        title="File Deletion Error",
                        message=f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path}: {e}",
                        app_name="Stock Data Updater",
                        timeout=10
                    )
        except Exception as e:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {folder}: {e}")
            safe_notify(
                title="Folder Access Error",
                message=f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {folder}: {e}",
                app_name="Stock Data Updater",
                timeout=10
            )
    
    logger.info(f"‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .csv ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ({deleted_count} ‡πÑ‡∏ü‡∏•‡πå)")
    safe_notify(
        title="File Deletion",
        message=f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .csv ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ({deleted_count} ‡πÑ‡∏ü‡∏•‡πå)",
        app_name="Stock Data Updater",
        timeout=10
    )

def load_market_holidays():
    """‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    try:
        holidays_file = "market_holidays_th.json"
        if os.path.exists(holidays_file):
            with open(holidays_file, "r", encoding="utf-8") as f:
                return json.load(f).get("TH", [])
        else:
            logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {holidays_file}")
            safe_notify(
                title="Holiday File Error",
                message=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {holidays_file}",
                app_name="Stock Data Updater",
                timeout=10
            )
            return []
    except Exception as e:
        logger.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î TH ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        safe_notify(
            title="Holiday File Error",
            message=f"‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î TH ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}",
            app_name="Stock Data Updater",
            timeout=10
        )
        return []

def is_market_open(now, market):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    today = now.date()
    weekday = today.weekday()

    if weekday >= 5:
        logger.info(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå: {today}")
        safe_notify(
            title="Market Closed",
            message=f"‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå: {today}",
            app_name="Stock Data Updater",
            timeout=10
        )
        return False

    if market == "TH":
        holidays = load_market_holidays()
        is_holiday = today.strftime("%Y-%m-%d") in holidays
        if is_holiday:
            logger.info(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢: {today}")
            safe_notify(
                title="Market Closed",
                message=f"‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢: {today}",
                app_name="Stock Data Updater",
                timeout=10
            )
        return not is_holiday

    elif market == "US":
        try:
            from workalendar.usa import UnitedStates
            cal = UnitedStates()
            is_working = cal.is_working_day(today)
            if not is_working:
                logger.info(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏´‡∏£‡∏±‡∏ê: {today}")
                safe_notify(
                    title="Market Closed",
                    message=f"‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏´‡∏£‡∏±‡∏ê: {today}",
                    app_name="Stock Data Updater",
                    timeout=10
                )
            return is_working
        except ImportError:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö workalendar - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install workalendar")
            safe_notify(
                title="Module Error",
                message="‡πÑ‡∏°‡πà‡∏û‡∏ö workalendar - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install workalendar",
                app_name="Stock Data Updater",
                timeout=10
            )
            return weekday < 5
        except Exception as e:
            logger.error(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î US ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            safe_notify(
                title="Market Check Error",
                message=f"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ï‡∏•‡∏≤‡∏î US ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}",
                app_name="Stock Data Updater",
                timeout=10
            )
            return weekday < 5

    return False

def update_stock_data_ignore_time():
    logger.info("üóÇ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê...")
    safe_notify(
        title="Stock Update",
        message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê...",
        app_name="Stock Data Updater",
        timeout=10
    )
    if update_yfinance():
        run_scripts(SCRIPTS["stock_us"]["get_stock"], "Get Stock US", critical=False)
        run_scripts(SCRIPTS["stock_us"]["get_financial"], "Get Financial US", critical=False)
        run_scripts(SCRIPTS["stock_us"]["daily_sentiment"], "Daily Sentiment US", critical=False)
        run_scripts(SCRIPTS["stock_us"]["combine_all"], "Combine All US", critical=False)
        run_scripts(SCRIPTS["stock_us"]["stock_to_database"], "Stock to Database US", critical=False)
        logger.info("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        safe_notify(
            title="Stock Update Success",
            message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            app_name="Stock Data Updater",
            timeout=10
        )
    
    logger.info("üóÇ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢...")
    safe_notify(
        title="Stock Update",
        message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢...",
        app_name="Stock Data Updater",
        timeout=10
    )
    if update_yfinance():
        run_scripts(SCRIPTS["stock_th"]["get_stock"], "Get Stock TH", critical=False)
        run_scripts(SCRIPTS["stock_th"]["get_financial"], "Get Financial TH", critical=False)
        run_scripts(SCRIPTS["stock_th"]["daily_sentiment"], "Daily Sentiment TH", critical=False)
        run_scripts(SCRIPTS["stock_th"]["combine_all"], "Combine All TH", critical=False)
        run_scripts(SCRIPTS["stock_th"]["stock_to_database"], "Stock to Database TH", critical=False)
        logger.info("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        safe_notify(
            title="Stock Update Success",
            message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            app_name="Stock Data Updater",
            timeout=10
        )


last_run = {}
running_scripts = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô
def update_stock_data(now, market):
    global running_scripts
    logger.info(f"‚è∞ Checking market {market} at {now.strftime('%H:%M:%S')} - Open: {is_market_open(now, market)}")
    if not is_market_open(now, market):
        logger.info(f"üìÖ ‡∏ï‡∏•‡∏≤‡∏î {market} ‡∏õ‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
        return
    if market in last_run and last_run[market].date() == now.date():
        logger.info(f"‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {market} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏±‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
        return

    if market == "US" and now.hour >= 20:
        logger.info("üóÇ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê...")
        safe_notify(
            title="Stock Update",
            message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê...",
            app_name="Stock Data Updater",
            timeout=10
        )
        if update_yfinance():
            for script_group, group_name in [
                (SCRIPTS["stock_us"]["get_stock"], "Get Stock US"),
                (SCRIPTS["stock_us"]["get_financial"], "Get Financial US"),
                (SCRIPTS["stock_us"]["daily_sentiment"], "Daily Sentiment US"),
                (SCRIPTS["stock_us"]["combine_all"], "Combine All US"),
                (SCRIPTS["stock_us"]["stock_to_database"], "Stock to Database US")
            ]:
                for script in script_group:
                    if script in running_scripts:
                        logger.info(f"‚è© ‡∏Ç‡πâ‡∏≤‡∏° {script} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà")
                        continue
                    running_scripts.add(script)
                    try:
                        run_scripts(script_group, group_name, critical=False)
                    finally:
                        running_scripts.remove(script)
            logger.info("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            safe_notify(
                title="Stock Update Success",
                message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏´‡∏£‡∏±‡∏ê‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
                app_name="Stock Data Updater",
                timeout=10
            )
            last_run[market] = now

    elif market == "TH" and now.hour >= 8:
        logger.info("üóÇ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢...")
        safe_notify(
            title="Stock Update",
            message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢...",
            app_name="Stock Data Updater",
            timeout=10
        )
        if update_yfinance():
            for script_group, group_name in [
                (SCRIPTS["stock_th"]["get_stock"], "Get Stock TH"),
                (SCRIPTS["stock_th"]["get_financial"], "Get Financial TH"),
                (SCRIPTS["stock_th"]["daily_sentiment"], "Daily Sentiment TH"),
                (SCRIPTS["stock_th"]["combine_all"], "Combine All TH"),
                (SCRIPTS["stock_th"]["stock_to_database"], "Stock to Database TH")
            ]:
                for script in script_group:
                    if script in running_scripts:
                        logger.info(f"‚è© ‡∏Ç‡πâ‡∏≤‡∏° {script} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà")
                        continue
                    running_scripts.add(script)
                    try:
                        run_scripts(script_group, group_name, critical=False)
                    finally:
                        running_scripts.remove(script)
            logger.info("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            safe_notify(
                title="Stock Update Success",
                message="‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
                app_name="Stock Data Updater",
                timeout=10
            )
            last_run[market] = now
    else:
        logger.info(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {market}: {now.hour}:{now.minute}")
        safe_notify(
            title="Stock Update Skipped",
            message=f"‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {market}: {now.hour}:{now.minute}",
            app_name="Stock Data Updater",
            timeout=10
        )

def get_user_input():
    """‡∏£‡∏±‡∏ö input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout"""
    user_input = []

    def ask_input():
        try:
            mode = input("Enter mode (1 or 2 or 3): ").strip()
            user_input.append(mode if mode in ["1", "2", "3"] else "1")
        except:
            user_input.append("1")

    print("Select mode:")
    print("1. Auto run (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)")
    print("2. Manual run (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î)")
    print("3. Manual run stock (‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô)")

    input_thread = threading.Thread(target=ask_input)
    input_thread.daemon = True
    input_thread.start()
    input_thread.join(timeout=10)
    
    mode = user_input[0] if user_input else "1"
    logger.info(f"mode: {mode}")
    safe_notify(
        title="Mode Selected",
        message=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î: {mode}",
        app_name="Stock Data Updater",
        timeout=10
    )
    return mode

def run_auto_mode():
    """‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
    last_run_hour = None
    logger.info("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ - ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    safe_notify(
        title="Auto Mode",
        message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        app_name="Stock Data Updater",
        timeout=10
    )
    
    try:
        while True:
            now = datetime.datetime.now()
            current_hour = now.hour
            
            update_stock_data(now, "US")
            update_stock_data(now, "TH")
            
            if (current_hour % 2 == 0 and 
                current_hour != last_run_hour and 
                now.minute == 0):
                logger.info(f"üïí Running news scripts at {now.strftime('%H:%M:%S')}")
                last_run_hour = current_hour
                
                try:
                    run_all_news_scripts()
                    
                    # if now.hour == 0 and now.weekday() == 6:
                    #     logger.info("üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå...")
                    #     clear_stock_csv()
                    
                    logger.info("üéâ All scripts completed successfully.")
                    safe_notify(
                        title="All Scripts Completed",
                        message="‡∏ó‡∏∏‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                        app_name="Stock Data Updater",
                        timeout=10
                    )
                    
                except Exception as e:
                    logger.error(f"‚ùå Unexpected error: {e}")
                    safe_notify(
                        title="Unexpected Error",
                        message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}",
                        app_name="Stock Data Updater",
                        timeout=10
                    )
            
            time.sleep(60)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        safe_notify(
            title="Program Stopped",
            message="‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
            app_name="Stock Data Updater",
            timeout=10
        )
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {e}")
        safe_notify(
            title="Auto Mode Error",
            message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥: {e}",
            app_name="Stock Data Updater",
            timeout=10
        )

def run_manual_mode():
    """‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
    safe_notify(
        title="Manual Mode",
        message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
        app_name="Stock Data Updater",
        timeout=10
    )
    try:
        success = run_all_news_scripts()
        if success:
            logger.info("üéâ All scripts completed successfully.")
            safe_notify(
                title="Manual Mode Success",
                message="‡∏ó‡∏∏‡∏Å‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                app_name="Stock Data Updater",
                timeout=10
            )
        else:
            logger.error("‚ùå ‡∏ö‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            safe_notify(
                title="Manual Mode Error",
                message="‡∏ö‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                app_name="Stock Data Updater",
                timeout=10
            )
    except Exception as e:
        logger.error(f"‚ùå Unexpected error: {e}")
        safe_notify(
            title="Unexpected Error",
            message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}",
            app_name="Stock Data Updater",
            timeout=10
        )

def run_manual_mode_stock():
    """‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô"""
    logger.info("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô")
    safe_notify(
        title="Stock Manual Mode",
        message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô",
        app_name="Stock Data Updater",
        timeout=10
    )
    try:
        now = datetime.datetime.now()
        update_stock_data(now, "US")
        update_stock_data(now, "TH")
        logger.info("üéâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        safe_notify(
            title="Stock Update Success",
            message="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
            app_name="Stock Data Updater",
            timeout=10
        )
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô: {e}")
        safe_notify(
            title="Stock Update Error",
            message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô: {e}",
            app_name="Stock Data Updater",
            timeout=10
        )

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    safe_notify(
        title="Program Started",
        message="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°",
        app_name="Stock Data Updater",
        timeout=10
    )
    
    try:
        mode = get_user_input()
        
        if mode == "1":
            run_auto_mode()
        elif mode == "2":
            run_manual_mode()
        else:
            update_stock_data_ignore_time()
            
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å: {e}")
        safe_notify(
            title="Program Error",
            message=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å: {e}",
            app_name="Stock Data Updater",
            timeout=10
        )
    finally:
        logger.info("üîö ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        safe_notify(
            title="Program Ended",
            message="‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
            app_name="Stock Data Updater",
            timeout=10
        )

if __name__ == "__main__":
    main()
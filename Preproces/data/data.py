import yfinance as yf
import pandas as pd
import datetime
import sys
import os
import mysql.connector
from dotenv import load_dotenv
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.firefox.service import Service  
from selenium.webdriver.firefox.options import Options 
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from webdriver_manager.firefox import GeckoDriverManager  # ‡πÉ‡∏ä‡πâ WebDriverManager
import re
import sys
import os
import io
import io

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤ (Top 10)
tickers = ['AAPL', 'NVDA', 'MSFT', 'AMZN', 'GOOGL', 'META', 'TSLA', 'AVGO', 'TSM', 'AMD','ADVANC.BK', 'TRUE.BK', 'DITTO.BK', 'DIF.BK', 
           'INSET.BK', 'JMART.BK', 'INET.BK', 'JAS.BK', 'HUMAN.BK']

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏∏‡πâ‡∏ô
start_date = '2017-12-20'
end_date = datetime.datetime.today().strftime('%Y-%m-%d')

# ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
CURRENT_DIR = os.getcwd()
os.makedirs(os.path.join(CURRENT_DIR, "Stock"), exist_ok=True)

# ‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å yfinance ‡∏û‡∏£‡πâ‡∏≠‡∏° Retry
max_retries = 3
retry_count = 0

while retry_count < max_retries:
    try:
        data = yf.download(tickers, start=start_date, end=end_date, group_by='ticker')
        if data.empty:
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å yfinance ‡πÑ‡∏î‡πâ")
        break
    except Exception as e:
        retry_count += 1
        print(f"‚ö†Ô∏è Error: {e} (‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà {retry_count}/{max_retries})")
        if retry_count == max_retries:
            sys.exit(1)

# ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
data_list = []

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Rolling Mean ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö
for ticker in tickers:
    ticker_data = data[ticker].copy()
    stock_name = ticker.replace('.BK', '')
    ticker_data.index = pd.to_datetime(ticker_data.index)
    all_dates = pd.date_range(start=start_date, end=end_date, freq='D')
    ticker_data = ticker_data.reindex(all_dates)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
    missing_percentage = ticker_data[['Open', 'High', 'Low', 'Close', 'Volume']].isnull().mean() * 100
    if missing_percentage.sum() > 20:
        print(f"‚ö†Ô∏è Warning: {ticker} has excessive missing data ({missing_percentage.sum():.2f}%).")

    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Rolling Mean ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤
    ticker_data[['Open', 'High', 'Low', 'Close']] = (
        ticker_data[['Open', 'High', 'Low', 'Close']]
        .ffill(limit=2)  # Forward Fill ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏±‡πâ‡∏ô ‡πÜ
        .rolling(window=3, min_periods=1).mean()
    )

    # ‡∏ï‡∏±‡πâ‡∏á Volume ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î
    ticker_data['Volume'] = ticker_data['Volume'].fillna(0)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Changepercen ‡πÉ‡∏´‡∏°‡πà
    ticker_data['Changepercen'] = (ticker_data['Close'] - ticker_data['Open']) / ticker_data['Open'] * 100
    ticker_data['Changepercen'] = ticker_data['Changepercen'].fillna(0)

    ticker_data['Ticker'] = stock_name
    data_list.append(ticker_data)

# ‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
cleaned_data = pd.concat(data_list).reset_index().rename(columns={'index': 'Date'})
cleaned_data = cleaned_data[['Date', 'Ticker', 'Open', 'High', 'Low', 'Close', 'Volume' , 
                             'Changepercen']]
cleaned_data = cleaned_data.dropna(subset=['Open', 'High', 'Low', 'Close', 'Volume'])

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV
output_path = os.path.join(CURRENT_DIR, "Stock", "stock_data.csv")
cleaned_data.to_csv(output_path, index=False)

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print(cleaned_data.head())

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏õ‡∏£‡∏±‡∏ö `..` ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå)
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome options
options = Options()
options.add_argument('--headless')  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ UI
options.add_argument('--disable-gpu')
options.add_argument('--ignore-certificate-errors')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--blink-settings=imagesEnabled=false')  # ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û

# üîπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firefox driver ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î WebDriver...")
service = Service(GeckoDriverManager().install())
driver = webdriver.Firefox(service=service, options=options)
print("‚úÖ WebDriver ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
def clean_year(value):
    if isinstance(value, str):
        match = re.search(r"\b(\d{2,4})\b", value)
        if match:
            year = int(match.group())
            if year > 2500:
                return str(year - 543)  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    return value

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
column_translation = {
        "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°": "Total Revenue",
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ï‡πà‡∏≠‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ (%)": "QoQ Growth (%)",
        "‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (%)": "YoY Growth (%)",
        "‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥": "Net Profit",
        "‡∏Å‡∏≥‡πÑ‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (EPS)": "Earnings Per Share (EPS)",
        "‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏£‡∏ß‡∏°": "Total Assets",
        "‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏£‡∏ß‡∏°": "Total Liabilities",
        "‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô": "Shareholder Equity",
        "‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô": "Gross Profit",
        "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£": "Selling & Admin Expenses",
        "‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢": "Depreciation & Amortization",
        "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô": "Operating Cash Flow",
        "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô": "Investing Cash Flow",
        "‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô": "Financing Cash Flow",
        "ROA (%)": "ROA (%)",
        "ROE (%)": "ROE (%)",
        "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏ô (%)": "Gross Margin (%)",
        "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (%)": "Selling & Admin Expense to Revenue (%)",
        "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (%)": "Net Profit Margin (%)",
        "‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô/‡∏ó‡∏∏‡∏ô (‡πÄ‡∏ó‡πà‡∏≤)": "Debt to Equity (x)",
        "‡∏ß‡∏á‡∏à‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î (‡∏ß‡∏±‡∏ô)": "Cash Cycle (Days)",
        "P/E (‡πÄ‡∏ó‡πà‡∏≤)": "P/E Ratio (x)",
        "P/BV (‡πÄ‡∏ó‡πà‡∏≤)": "P/BV Ratio (x)",
        "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô(%)": "Dividend Yield (%)",
        "EV / EBITDA": "EV / EBITDA"
    }

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
def translate_columns(df, translation_dict):
    df.columns = [translation_dict.get(col, col) for col in df.columns]
    return df

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def fetch_full_financial_data(stock):
    url = f"https://www.finnomena.com/stock/{stock}"

    print(f"üåç ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö: {url}")
    driver.get(url)

    try:
        # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î...")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "a-toggle-switchtext"))
        )
        print("‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

        # ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡πÇ‡∏´‡∏•‡∏î
        print("‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡πÇ‡∏´‡∏•‡∏î...")
        time.sleep(3)
        print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

        # ‚úÖ ‡∏î‡∏∂‡∏á HTML ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
        soup = BeautifulSoup(driver.page_source, "html.parser")

        # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        tables = soup.find_all("table")

        if not tables:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á {stock}!")
            return None

        print(f"‚úÖ ‡∏û‡∏ö {len(tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")

        all_data = []

        # üîπ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        for table in tables:
            rows = table.find_all("tr")
            quarters = [th.text.strip() for th in rows[0].find_all("th")[1:] if "Q" in th.text]
            values_dict = {quarter: [] for quarter in quarters}

            for row in rows[1:]:
                cols = row.find_all("td")
                metric_name = cols[0].text.strip()
                for year, col in zip(quarters, cols[1:]):
                    value = col.text.strip().replace(",", "")
                    try:
                        values_dict[year].append(float(value))  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                    except ValueError:
                        values_dict[year].append(value)  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô string

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
            df = pd.DataFrame(values_dict, index=[row.find("td").text.strip() for row in rows[1:]]).T
            df.insert(0, "Stock", stock)
            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Quarter ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "4Q2024" ‡πÅ‡∏ó‡∏ô "4Q2567"
            df.insert(1, "Quarter", df.index.map(lambda x: x[:2] + clean_year(x[2:])))

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ 'Year' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å 'Quarter'
            df["Year"] = df["Quarter"].apply(lambda x: int(x[2:]))

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á Quarter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            quarter_map = {"4Q": 4, "3Q": 3, "2Q": 2, "1Q": 1}
            df["Quarter_Order"] = df["Quarter"].apply(lambda x: quarter_map[x[:2]])
            
            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Year ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö Quarter
            df = df.sort_values(by=["Year", "Quarter_Order"], ascending=[False, False])

            # ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á
            df = df.drop(columns=["Year", "Quarter_Order"])

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
            df['Quarter'] = df['Quarter'].apply(clean_year)
            all_data.append(df)

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
        full_df = pd.concat(all_data, axis=1).loc[:, ~pd.concat(all_data, axis=1).columns.duplicated()]

        # ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        full_df = full_df.loc[:, ~full_df.columns.duplicated()]

        # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏ô‡∏ñ‡∏∂‡∏á "EV / EBITDA"
        columns_to_keep = []
        keep = False
        for col in full_df.columns:
            columns_to_keep.append(col)
            if "EV / EBITDA" in col:
                break

        columns_to_keep = ['Stock', 'Quarter'] + columns_to_keep[2:]  # ‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° 'Year' ‡∏ã‡πâ‡∏≥
        full_df = full_df[columns_to_keep]

        # ‚úÖ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà "N/A" ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (null)
        full_df = full_df.replace("N/A", "").infer_objects(copy=False)

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        full_df = translate_columns(full_df, column_translation)

        # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
        full_df = full_df.sort_values(by="Quarter", ascending=False)

        # ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ Stock & Quarter ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        columns_order = ["Stock", "Quarter"] + [col for col in full_df.columns if col not in ["Stock", "Quarter"]]
        full_df = full_df[columns_order]

        print("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return full_df

    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {stock}: {e}")
        return None

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
stocks = ["ADVANC", "INTUCH", "TRUE", "DITTO", "DIF", "INSET", "JMART", "INET", "JAS", "HUMAN",'AAPL.us', 'NVDA.us', 'MSFT.us', 'AMZN.us', 'GOOGL.us', 'META.us', 'TSLA.us', 'AVGO.us', 'TSM.us', 'AMD.us']
all_dfs = []

for stock in stocks:
    print(f"üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {stock}...")
    df = fetch_full_financial_data(stock)
    if df is not None:
        all_dfs.append(df)

# ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏∏‡πâ‡∏ô
final_df = pd.concat(all_dfs, ignore_index=True)

# ‚úÖ ‡∏•‡∏ö .us ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Stock'
final_df['Stock'] = final_df['Stock'].str.replace('.us', '', regex=False)

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á CSV
output_path = os.path.join(SCRIPT_DIR, "Stock", "Financial_Quarter.csv")
os.makedirs(os.path.dirname(output_path), exist_ok=True)
final_df.to_csv(output_path, index=False)
print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á '{os.path.basename(output_path)}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

# ‚úÖ ‡∏õ‡∏¥‡∏î WebDriver
driver.quit()
print("üõë ‡∏õ‡∏¥‡∏î WebDriver ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")


# ---------------------------
# 1) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô merge ‡∏´‡∏•‡∏±‡∏Å
# ---------------------------
def merge_stock_financial_sentiment(
    stock_filepath: str,
    financial_filepath: str,
    sentiment_df: pd.DataFrame,
):
    
    # 1. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
    stock_df = pd.read_csv(stock_filepath)
    financial_df = pd.read_csv(financial_filepath)
    
    # --------------------
    # (a) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame stock
    # --------------------
    # ‡πÉ‡∏´‡πâ Date ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡∏∞‡∏•‡∏ö timezone ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    stock_df["Date"] = pd.to_datetime(stock_df["Date"], errors="coerce").dt.tz_localize(None)
    
    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Quarter ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å Date
    if "Quarter" not in stock_df.columns:
        stock_df["Quarter"] = stock_df["Date"].dt.to_period("Q").astype(str)
    
    # --------------------
    # (b) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame financial
    # --------------------
    # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    financial_df.columns = financial_df.columns.str.strip()
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ "EV / EBITDA" -> "EVEBITDA" (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if "EV / EBITDA" in financial_df.columns:
        financial_df.rename(columns={"EV / EBITDA": "EVEBITDA"}, inplace=True)
    
    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö
    columns_to_keep = [
        "Stock", "Quarter", "QoQ Growth (%)", "Total Revenue", "YoY Growth (%)",
        "Net Profit", "Earnings Per Share (EPS)", "ROA (%)", "ROE (%)", 
        "Gross Margin (%)", "Net Profit Margin (%)", "Debt to Equity (x)",
        "P/E Ratio (x)", "P/BV Ratio (x)", "Dividend Yield (%)", "EVEBITDA", 
        "MarketCap"
    ]
    # ‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
    financial_df = financial_df[[c for c in columns_to_keep if c in financial_df.columns]]
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ format ‡∏Ç‡∏≠‡∏á Quarter ‡πÄ‡∏ä‡πà‡∏ô 3Q2022 -> 2022Q3
    def fix_quarter_format(q_str):
        q_str = str(q_str).strip()
        if len(q_str) == 6 and q_str[0].isdigit() and q_str[1] == "Q":
            return q_str[-4:] + "Q" + q_str[0]  # 3Q2022 -> 2022Q3
        return q_str
    
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quarter Date
    def quarter_to_announcement_date(q_str):
        try:
            year, q = int(q_str[:4]), int(q_str[-1])
            quarter_dates = {1: "01-01", 2: "04-01", 3: "07-01", 4: "10-01"}
            if q == 4:
                year += 1
            return pd.Timestamp(f"{year}-{quarter_dates[q]}")
        except:
            return pd.NaT
    
    financial_df["Quarter"] = financial_df["Quarter"].apply(fix_quarter_format)
    financial_df["Quarter Date"] = financial_df["Quarter"].apply(quarter_to_announcement_date)
    
    # --------------------
    # (c) ‡∏£‡∏ß‡∏° sentiment ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö stock
    # --------------------
    # Merge ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå ["Ticker","Date"]
    merged_df = stock_df.merge(
        sentiment_df,   # ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå sentiment ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏¥‡∏î‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        on=["Ticker","Date"],  
        how="left"
    )
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "Sentiment" ‡πÅ‡∏ï‡πà‡∏°‡∏µ net_sentiment_score ‡∏Å‡πá‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
    if "Sentiment" not in merged_df.columns and "net_sentiment_score" in merged_df.columns:
        merged_df["Sentiment"] = merged_df["net_sentiment_score"].apply(
            lambda x: "Positive" if x > 0.2 else "Negative" if x < -0.2 else "Neutral"
        )
    
    # ‡πÄ‡∏ï‡∏¥‡∏° NaN ‡πÉ‡∏ô Sentiment ‡πÄ‡∏õ‡πá‡∏ô Neutral ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    if "Sentiment" in merged_df.columns:
        merged_df["Sentiment"] = merged_df["Sentiment"].fillna("Neutral")
    
    # --------------------
    # (d) merge financial ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö merged_df
    # --------------------
    # ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ [Ticker, Quarter] ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö [Stock, Quarter]
    merged_df = merged_df.merge(
        financial_df,
        left_on=["Ticker", "Quarter"],
        right_on=["Stock", "Quarter"],
        how="left"
    )
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Stock ‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
    if "Stock" in merged_df.columns:
        merged_df.drop(columns=["Stock"], inplace=True)
    
    # --------------------
    # (e) ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
    # --------------------
    columns_to_remove = ["Quarter"]  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏ö Quarter ‡∏ó‡∏¥‡πâ‡∏á
    merged_df.drop(columns=columns_to_remove, errors="ignore", inplace=True)
    
    # --------------------
    # (f) ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Financial ‡πÇ‡∏ú‡∏•‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà = Quarter Date ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    # --------------------
    def clean_data_based_on_dates(df):
        columns_to_clean = [
            "QoQ Growth (%)", "Total Revenue", "YoY Growth (%)", "Net Profit",
            "Earnings Per Share (EPS)", "ROA (%)", "ROE (%)", "Gross Margin (%)",
            "Net Profit Margin (%)", "Debt to Equity (x)", "P/E Ratio (x)",
            "P/BV Ratio (x)", "Dividend Yield (%)", "EVEBITDA", "MarketCap"
        ]
        for col in columns_to_clean:
            if col in df.columns:
                df.loc[df["Date"] != df["Quarter Date"], col] = None
        return df
    
    merged_df = clean_data_based_on_dates(merged_df)
    
    # --------------------
    # (g) ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà Close == 0 ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
    # --------------------
    financial_cols = [
        "QoQ Growth (%)", "Total Revenue", "YoY Growth (%)", "Net Profit",
        "Earnings Per Share (EPS)", "ROA (%)", "ROE (%)", "Gross Margin (%)",
        "Net Profit Margin (%)", "Debt to Equity (x)", "P/E Ratio (x)",
        "P/BV Ratio (x)", "Dividend Yield (%)", "EVEBITDA", "MarketCap"
    ]
    valid_financial_cols = [col for col in financial_cols if col in merged_df.columns]
    merged_df = merged_df[
        ~(
            (merged_df["Close"] == 0)
            & (merged_df[valid_financial_cols].isna().all(axis=1))
        )
    ]
    
    # --------------------
    # (h) ‡πÄ‡∏ï‡∏¥‡∏° MarketCap ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà Date == Quarter Date
    # --------------------
    if "MarketCap" in merged_df.columns:
        merged_df["MarketCap"] = merged_df.apply(
            lambda row: row["MarketCap"] if row["Date"] == row["Quarter Date"] else None,
            axis=1
        )
    
    # --------------------
    # (i) ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Quarter Date ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô NaT
    # --------------------
    merged_df.rename(
        columns={
            "Debt to Equity (x)": "Debt to Equity",
            "P/E Ratio (x)": "P/E Ratio",
            "P/BV Ratio (x)": "P/BV Ratio"
        },
        inplace=True
    )
    
    us_stock = ['AAPL', 'NVDA', 'MSFT', 'AMZN', 'GOOGL', 'META', 'TSLA', 'AVGO', 'TSM', 'AMD']
    thai_stock = ['ADVANC', 'INTUCH', 'TRUE', 'DITTO', 'DIF', 
                  'INSET', 'JMART', 'INET', 'JAS', 'HUMAN']
    
    merged_df["Market_ID"] = merged_df["Ticker"].apply(
        lambda x: "US" if x in us_stock else "TH" if x in thai_stock else None
    )
    
    # --------------------
    # ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß return ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    # --------------------
    return merged_df


# ---------------------------
# 2) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô merge ‡∏Å‡∏±‡∏ö (‡πÑ‡∏ó‡∏¢ + ‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤) ‡πÅ‡∏•‡πâ‡∏ß concat
# ---------------------------
if __name__ == "__main__":

    # 1) ‡∏≠‡πà‡∏≤‡∏ô sentiment ‡πÉ‡∏´‡∏°‡πà ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå date, Stock, positive_news, negative_news, ‚Ä¶
    sentiment_path = os.path.join(os.path.dirname(__file__), "..", "sentimentnews","daily_sentiment_summary.csv")
    sentiment_df = pd.read_csv(sentiment_path)
    
    # 2) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö stock
    #    ‡∏Ñ‡∏∑‡∏≠ Stock -> Ticker, date -> Date
    sentiment_df.rename(columns={
        "Stock": "Ticker",
        "date": "Date"
    }, inplace=True)
    
    # ‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡∏∞‡∏•‡∏ö timezone ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    sentiment_df["Date"] = pd.to_datetime(sentiment_df["Date"], errors="coerce").dt.tz_localize(None)

    # 3) Merge ‡∏ù‡∏±‡πà‡∏á‡πÑ‡∏ó‡∏¢
    merged_df_th = merge_stock_financial_sentiment(
        stock_filepath=os.path.join(os.path.dirname(__file__), "Stock", "stock_data.csv"),
        financial_filepath=os.path.join(os.path.dirname(__file__), "Stock", "Financial_Quarter.csv"),
        sentiment_df=sentiment_df
    )
    
    # 6) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    merged_df_th.to_csv(os.path.join(os.path.dirname(__file__), "Stock", "merged_stock_sentiment_financial.csv"), index=False)
    
    # 7) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 10 ‡πÅ‡∏ñ‡∏ß
    print(merged_df_th.head(10))
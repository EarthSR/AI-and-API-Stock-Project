import mysql.connector
import os
import pandas as pd
import numpy as np
import requests
from dotenv import load_dotenv
import logging

# ‚úÖ Enhanced Trading System ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß

class EnhancedTradingSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Raw Model Data ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    
    def __init__(self, api: 'InnovestXAPI', capital, max_risk_per_trade=0.01, max_positions=5):
        self.api = api
        self.capital = capital
        self.cash = capital
        self.max_risk_per_trade = max_risk_per_trade
        self.max_positions = max_positions
        self.positions = {}
        
        # ‚úÖ Enhanced Risk Management Parameters
        self.min_confidence = 0.6  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        self.min_consistency = 80.0  # consistency ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (%)
        self.max_position_risk = 0.05  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    def fetch_enhanced_stock_data(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° enhanced columns ‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
        conn = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• enhanced columns ‡∏î‡πâ‡∏ß‡∏¢
            query = """
            SELECT 
                Date, StockSymbol, ClosePrice, HighPrice, LowPrice,
                PredictionClose_Ensemble, PredictionTrend_Ensemble,
                XGB_Confidence, Risk_Level, Is_Inconsistent, 
                Suggested_Action, Reliability_Warning, Ensemble_Method,
                Price_Change_Percent, Raw_Prediction_Used
            FROM StockDetail
            WHERE Date = (SELECT MAX(Date) FROM StockDetail)
            AND PredictionClose_Ensemble IS NOT NULL
            AND PredictionTrend_Ensemble IS NOT NULL
            ORDER BY XGB_Confidence DESC
            """
            
            self.logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° enhanced data...")
            cursor.execute(query)
            data = cursor.fetchall()
            
            if not data:
                self.logger.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                return pd.DataFrame()
                
            df = pd.DataFrame(data)
            self.logger.info(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡∏´‡∏∏‡πâ‡∏ô")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            numeric_cols = ['ClosePrice', 'HighPrice', 'LowPrice', 'PredictionClose_Ensemble', 
                          'XGB_Confidence', 'Price_Change_Percent']
            for col in numeric_cols:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
            
            return df
            
        except mysql.connector.Error as e:
            self.logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
            return pd.DataFrame()
        finally:
            if conn and conn.is_connected():
                cursor.close()
                conn.close()

    def filter_safe_stocks(self, df):
        """‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ Raw Model"""
        if df.empty:
            return df
        
        self.logger.info("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
        
        # ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡∏≤‡∏° enhanced model
        safe_conditions = (
            # 1. ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠
            (df['PredictionTrend_Ensemble'] == 1) &
            
            # 2. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
            (df['XGB_Confidence'] >= self.min_confidence) &
            
            # 3. ‡πÑ‡∏°‡πà‡∏°‡∏µ inconsistency (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
            (df['Is_Inconsistent'].fillna(False) == False) &
            
            # 4. Action ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà AVOID ‡∏´‡∏£‡∏∑‡∏≠ EXERCISE_EXTREME_CAUTION
            (~df['Suggested_Action'].isin(['AVOID', 'EXERCISE_EXTREME_CAUTION'])) &
            
            # 5. Risk Level ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà HIGH_RISK
            (~df['Risk_Level'].str.contains('HIGH_RISK', na=False)) &
            
            # 6. ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• (> 0)
            (df['ClosePrice'] > 0) &
            
            # 7. ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (< 10%)
            (df['Price_Change_Percent'].abs() < 10.0)
        )
        
        safe_stocks = df[safe_conditions].copy()
        
        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö risk management
        safe_stocks = self.calculate_atr_for_stocks(safe_stocks)
        
        # ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° confidence ‡πÅ‡∏•‡∏∞ risk level
        if not safe_stocks.empty:
            safe_stocks['Risk_Score'] = self.calculate_risk_score(safe_stocks)
            safe_stocks = safe_stocks.sort_values(['Risk_Score', 'XGB_Confidence'], 
                                                 ascending=[True, False])
        
        self.logger.info(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á:")
        self.logger.info(f"   üìà ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df)}")
        self.logger.info(f"   ‚úÖ ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: {len(safe_stocks)}")
        self.logger.info(f"   üö® ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å: {len(df) - len(safe_stocks)}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
        if len(df) > len(safe_stocks):
            filtered_out = df[~safe_conditions]
            self.logger.warning("‚ö†Ô∏è ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å:")
            for _, row in filtered_out.iterrows():
                reasons = []
                if row['PredictionTrend_Ensemble'] != 1:
                    reasons.append("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ã‡∏∑‡πâ‡∏≠")
                if row['XGB_Confidence'] < self.min_confidence:
                    reasons.append(f"Confidence ‡∏ï‡πà‡∏≥ ({row['XGB_Confidence']:.3f})")
                if row['Is_Inconsistent']:
                    reasons.append("‡∏°‡∏µ Inconsistency")
                if row['Suggested_Action'] in ['AVOID', 'EXERCISE_EXTREME_CAUTION']:
                    reasons.append(f"Action: {row['Suggested_Action']}")
                
                self.logger.warning(f"     {row['StockSymbol']}: {', '.join(reasons)}")
        
        return safe_stocks

    def calculate_atr_for_stocks(self, df):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
        # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR
        conn = None
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor(dictionary=True)
            
            symbols = "','".join(df['StockSymbol'].tolist())
            atr_query = f"""
            SELECT StockSymbol, 
                   AVG(HighPrice - LowPrice) as ATR_estimate
            FROM StockDetail 
            WHERE StockSymbol IN ('{symbols}')
            AND Date >= CURDATE() - INTERVAL 14 DAY
            GROUP BY StockSymbol
            """
            
            cursor.execute(atr_query)
            atr_data = cursor.fetchall()
            atr_df = pd.DataFrame(atr_data)
            
            if not atr_df.empty:
                df = df.merge(atr_df, on='StockSymbol', how='left')
                df['ATR'] = df['ATR_estimate'].fillna(df['ClosePrice'] * 0.02)  # 2% fallback
            else:
                df['ATR'] = df['ClosePrice'] * 0.02  # 2% fallback
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ATR ‡πÑ‡∏î‡πâ: {e}, ‡πÉ‡∏ä‡πâ 2% ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ó‡∏ô")
            df['ATR'] = df['ClosePrice'] * 0.02
        finally:
            if conn and conn.is_connected():
                cursor.close()
                conn.close()
        
        return df

    def calculate_risk_score(self, df):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏ß‡∏°"""
        risk_scores = []
        
        for _, row in df.iterrows():
            score = 0
            
            # ‡∏•‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° confidence (confidence ‡∏™‡∏π‡∏á = risk ‡∏ï‡πà‡∏≥)
            score += (1 - row['XGB_Confidence']) * 50
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° volatility
            if 'Price_Change_Percent' in row:
                score += abs(row['Price_Change_Percent']) * 2
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏° risk level
            if 'Risk_Level' in row and pd.notna(row['Risk_Level']):
                if 'MEDIUM_RISK' in str(row['Risk_Level']):
                    score += 25
                elif 'HIGH_RISK' in str(row['Risk_Level']):
                    score += 100  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
            
            risk_scores.append(score)
        
        return risk_scores

    def calculate_position_size(self, stock_data):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° Kelly Criterion ‡πÅ‡∏•‡∏∞ Risk Management"""
        current_price = stock_data['ClosePrice']
        predicted_price = stock_data['PredictionClose_Ensemble']
        confidence = stock_data['XGB_Confidence']
        atr = stock_data['ATR']
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì potential profit ‡πÅ‡∏•‡∏∞ risk
        expected_return = (predicted_price - current_price) / current_price
        stop_loss_price = current_price - (atr * 2)  # 2 ATR stop loss
        risk_per_share = current_price - stop_loss_price
        
        if risk_per_share <= 0 or expected_return <= 0:
            return 0
        
        # Kelly Criterion ‡πÅ‡∏ö‡∏ö conservative
        win_probability = confidence  # ‡πÉ‡∏ä‡πâ model confidence ‡πÄ‡∏õ‡πá‡∏ô probability
        avg_win = expected_return
        avg_loss = risk_per_share / current_price
        
        kelly_fraction = (win_probability * avg_win - (1 - win_probability) * avg_loss) / avg_win
        kelly_fraction = max(0, min(kelly_fraction * 0.5, 0.1))  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 10% ‡πÅ‡∏•‡∏∞‡∏•‡∏î Kelly ‡∏•‡∏á 50%
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô
        position_value = self.cash * kelly_fraction
        max_risk_value = self.cash * self.max_risk_per_trade
        position_value = min(position_value, max_risk_value)
        
        quantity = int(position_value / current_price)
        
        self.logger.info(f"üìä Position sizing for {stock_data['StockSymbol']}:")
        self.logger.info(f"   üí∞ Current Price: {current_price:.2f}")
        self.logger.info(f"   üéØ Predicted Price: {predicted_price:.2f}")
        self.logger.info(f"   üìà Expected Return: {expected_return:.2%}")
        self.logger.info(f"   üõ°Ô∏è Stop Loss: {stop_loss_price:.2f}")
        self.logger.info(f"   üéØ Confidence: {confidence:.3f}")
        self.logger.info(f"   üìä Kelly Fraction: {kelly_fraction:.3%}")
        self.logger.info(f"   üì¶ Quantity: {quantity}")
        
        return quantity

    def execute_enhanced_trading(self):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
        self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢ Enhanced Trading System")
        
        # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô
        stock_data = self.fetch_enhanced_stock_data()
        if stock_data.empty:
            self.logger.warning("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
            return
        
        # 2. ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        safe_stocks = self.filter_safe_stocks(stock_data)
        if safe_stocks.empty:
            self.logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
            return
        
        # 3. ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏≤‡∏° max_positions
        safe_stocks = safe_stocks.head(self.max_positions)
        
        self.logger.info(f"üìà ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á: {len(safe_stocks)} ‡∏´‡∏∏‡πâ‡∏ô")
        
        # 4. ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
        successful_trades = 0
        for _, stock in safe_stocks.iterrows():
            if len(self.positions) >= self.max_positions:
                break
                
            if self.enter_enhanced_position(stock):
                successful_trades += 1
        
        self.logger.info(f"‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {successful_trades}/{len(safe_stocks)} ‡∏´‡∏∏‡πâ‡∏ô")
        self.print_portfolio()

    def enter_enhanced_position(self, stock_data):
        """‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
        symbol = stock_data['StockSymbol']
        
        if symbol in self.positions:
            self.logger.warning(f"‚ö†Ô∏è ‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {symbol} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return False
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        quantity = self.calculate_position_size(stock_data)
        
        if quantity <= 0:
            self.logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol}")
            return False
        
        current_price = stock_data['ClosePrice']
        atr = stock_data['ATR']
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î stop loss ‡πÅ‡∏•‡∏∞ take profit
        stop_loss = current_price - (atr * 2)
        take_profit = stock_data['PredictionClose_Ensemble']
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö risk-reward ratio
        risk = current_price - stop_loss
        reward = take_profit - current_price
        risk_reward_ratio = reward / risk if risk > 0 else 0
        
        if risk_reward_ratio < 1.5:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ risk:reward ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1:1.5
            self.logger.warning(f"‚ö†Ô∏è Risk-reward ratio ‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol}: {risk_reward_ratio:.2f}")
            return False
        
        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
        self.logger.info(f"üìà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {symbol}:")
        self.logger.info(f"   üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {quantity} ‡∏´‡∏∏‡πâ‡∏ô")
        self.logger.info(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {current_price:.2f}")
        self.logger.info(f"   üõ°Ô∏è Stop Loss: {stop_loss:.2f}")
        self.logger.info(f"   üéØ Take Profit: {take_profit:.2f}")
        self.logger.info(f"   üìä Risk:Reward = 1:{risk_reward_ratio:.2f}")
        
        if self.execute_trade(symbol, quantity, "buy", current_price):
            self.positions[symbol] = {
                'quantity': quantity,
                'entry_price': current_price,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'confidence': stock_data['XGB_Confidence'],
                'predicted_price': stock_data['PredictionClose_Ensemble'],
                'risk_level': stock_data.get('Risk_Level', 'UNKNOWN'),
                'entry_time': pd.Timestamp.now()
            }
            return True
        
        return False

    def execute_trade(self, symbol, quantity, order_type, price):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢ (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡∏´‡∏£‡∏∑‡∏≠ simulation)"""
        # ‡πÉ‡∏ä‡πâ current_price ‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á
        current_price = self.api.get_price(symbol)
        if current_price <= 0:
            current_price = price  # fallback
        
        self.logger.info(f"üîÑ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ {order_type} {symbol}: {quantity} ‡∏´‡∏∏‡πâ‡∏ô @ {current_price:.2f}")
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö simulation mode
        if hasattr(self.api, 'simulation_mode') and self.api.simulation_mode:
            trade_value = quantity * current_price
            if order_type == "buy":
                if self.cash >= trade_value:
                    self.cash -= trade_value
                    self.logger.info(f"‚úÖ [SIM] ‡∏ã‡∏∑‡πâ‡∏≠ {symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    return True
                else:
                    self.logger.error(f"‚ùå [SIM] ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol}")
                    return False
            elif order_type == "sell":
                self.cash += trade_value
                self.logger.info(f"‚úÖ [SIM] ‡∏Ç‡∏≤‡∏¢ {symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return True
        else:
            # ‡πÉ‡∏ä‡πâ API ‡∏à‡∏£‡∏¥‡∏á
            order_result = self.api.place_order(symbol, quantity, order_type, current_price)
            if order_result:
                trade_value = quantity * current_price
                if order_type == "buy":
                    self.cash -= trade_value
                elif order_type == "sell":
                    self.cash += trade_value
                return True
        
        return False

    def print_portfolio(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        self.logger.info("\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏≠‡∏£‡πå‡∏ï Enhanced Trading System:")
        self.logger.info("=" * 80)
        
        if not self.positions:
            self.logger.info("üì≠ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
            self.logger.info(f"üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {self.cash:,.2f} ‡∏ö‡∏≤‡∏ó")
            return
        
        total_value = 0
        total_pnl = 0
        
        for symbol, pos in self.positions.items():
            current_price = self.api.get_price(symbol)
            if current_price <= 0:
                current_price = pos['entry_price']
            
            value = pos['quantity'] * current_price
            total_value += value
            pnl = (current_price - pos['entry_price']) * pos['quantity']
            total_pnl += pnl
            pnl_pct = ((current_price / pos['entry_price']) - 1) * 100
            
            self.logger.info(f"üìà {symbol}:")
            self.logger.info(f"   üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {pos['quantity']} ‡∏´‡∏∏‡πâ‡∏ô")
            self.logger.info(f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤: {pos['entry_price']:.2f} | ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_price:.2f}")
            self.logger.info(f"   üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {pos['take_profit']:.2f} | Stop Loss: {pos['stop_loss']:.2f}")
            self.logger.info(f"   üìä ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: {value:,.2f} | P&L: {pnl:+,.2f} ({pnl_pct:+.2f}%)")
            self.logger.info(f"   üéØ Confidence: {pos['confidence']:.3f} | Risk: {pos['risk_level']}")
            self.logger.info(f"   ‚è∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {pos['entry_time'].strftime('%Y-%m-%d %H:%M')}")
            self.logger.info("-" * 60)
        
        total_portfolio_value = total_value + self.cash
        total_return_pct = ((total_portfolio_value / self.capital) - 1) * 100
        
        self.logger.info("üíº ‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏≠‡∏£‡πå‡∏ï:")
        self.logger.info(f"   üí∞ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏£‡∏ß‡∏°: {total_value:,.2f} ‡∏ö‡∏≤‡∏ó")
        self.logger.info(f"   üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {self.cash:,.2f} ‡∏ö‡∏≤‡∏ó")
        self.logger.info(f"   üè¶ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_portfolio_value:,.2f} ‡∏ö‡∏≤‡∏ó")
        self.logger.info(f"   üìà ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°: {total_pnl:+,.2f} ‡∏ö‡∏≤‡∏ó ({total_return_pct:+.2f}%)")
        self.logger.info("=" * 80)

# ‚úÖ Simulation API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
class SimulationAPI:
    """API ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
    def __init__(self):
        self.simulation_mode = True
        self.logger = logging.getLogger(__name__)
    
    def get_price(self, symbol):
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)"""
        try:
            conn = mysql.connector.connect(**DB_CONFIG)
            cursor = conn.cursor()
            cursor.execute(
                "SELECT ClosePrice FROM StockDetail WHERE StockSymbol = %s ORDER BY Date DESC LIMIT 1",
                (symbol,)
            )
            result = cursor.fetchone()
            return float(result[0]) if result else 0
        except:
            return 0
        finally:
            if conn:
                conn.close()
    
    def place_order(self, symbol, quantity, order_type, price=None):
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢"""
        self.logger.info(f"[SIM] ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á {order_type}: {symbol} {quantity} ‡∏´‡∏∏‡πâ‡∏ô @ {price:.2f}")
        return {"status": "success", "order_id": f"SIM_{symbol}_{pd.Timestamp.now().strftime('%H%M%S')}"}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
def run_enhanced_trading_system(capital=1000000, simulation=True):
    """‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏ö‡∏ö Enhanced"""
    
    if simulation:
        api = SimulationAPI()
        print("üéÆ ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Simulation")
    else:
        if not INNOVESTX_API_KEY:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö INNOVESTX_API_KEY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á")
            return
        api = InnovestXAPI(INNOVESTX_API_KEY, INNOVESTX_API_URL)
        print("üí∞ ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î
    trading_system = EnhancedTradingSystem(
        api=api,
        capital=capital,
        max_risk_per_trade=0.02,  # ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á 2% ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        max_positions=5           # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    )
    
    # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
    trading_system.execute_enhanced_trading()
    
    return trading_system

# ‚úÖ Main function
def main():
    print("üöÄ Enhanced Trading System - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Raw Model Data")
    print("=" * 60)
    
    # ‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î simulation ‡∏Å‡πà‡∏≠‡∏ô
    trading_system = run_enhanced_trading_system(
        capital=1000000,
        simulation=True
    )
    
    if trading_system and trading_system.positions:
        print("\nüéØ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á!")
        print("üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô simulation=False ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏£‡∏î‡∏à‡∏£‡∏¥‡∏á")
    else:
        print("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

if __name__ == "__main__":
    main()
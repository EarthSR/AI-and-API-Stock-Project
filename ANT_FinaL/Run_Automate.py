import subprocess
import sys
import os
import time
from datetime import datetime, timedelta

# ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ stdout ‡πÉ‡∏ä‡πâ UTF-8 ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
sys.stdout.reconfigure(encoding="utf-8", errors="ignore")

# ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Log (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
log_file = "system_run.log"

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log (Append Mode)
def write_log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with open(log_file, "a", encoding="utf-8") as log:
        log.write(f"[{timestamp}] {message}\n")
    print(message)  # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Console ‡∏î‡πâ‡∏ß‡∏¢

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def run_all_scripts():
    write_log(f"\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

    scripts = [
        ["ANT_Final/Thai_News_Database.py"],  # Step 1 - ‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏ó‡∏¢
        ["ANT_Final/America_News_Database.py"],  # Step 2 - ‡∏Ç‡πà‡∏≤‡∏ß Investing.com
        ["ANT_Final/Final_News_Merge.py"],  # Step 3 - ‡∏£‡∏ß‡∏°‡∏Ç‡πà‡∏≤‡∏ß
        ["Finbert/Finbert.py"],  # Step 4 - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Sentiment
        ["Finbert/calculate_weighted_sentiment.py"],  # Step 5 - ‡∏ó‡∏≥ daily sentiment
        ["ANT_Final/News_Database.py"],  # Step 6 - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database
        ["ANT_Final/Financial_America_Quarter.py"],  # Step 7 - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Financial USA
        ["ANT_Final/Financial_Thai_Quarter.py"],  # Step 8 - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Financial Thai
        ["American_stocks/GetdataAmericanStock.py"],  # Step 9 - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å USA Stock
        ["Thai_stocks/GetdataThaiStocks.py"],  # Step 10 - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Thai Stock
        ["combine.py"],  # Step 11 - ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≥ AI
        ["ANT_Final/Stock_Database.py"],  # Step 12 - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Stock ‡∏•‡∏á Database
        ["ANT_Final/GDP_Database.py"],  # Step 13 - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á GDP ‡∏•‡∏á Database
    ]

    def is_script_exist(script_path):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ script ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á"""
        return os.path.isfile(script_path)

    for step, script_set in enumerate(scripts, start=1):
        processes = []
        write_log(f"\n--- Step {step}: Running {script_set} ---\n")

        for script in script_set:
            if not is_script_exist(script):
                write_log(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå `{script}` ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô...")
                continue

            try:
                # ‚úÖ Force Overwrite: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                write_log(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πâ‡∏≤‡∏á Cache ‡∏Ç‡∏≠‡∏á `{script}`...")
                if os.path.exists(script):
                    os.utime(script, None)  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Python ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                
                # ‚úÖ ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
                process = subprocess.run(
                    [sys.executable, script],
                    capture_output=True,
                    text=True,
                    encoding="utf-8",
                    errors="ignore"
                )
                processes.append((script, process))
            except Exception as e:
                write_log(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô `{script}` ‡πÑ‡∏î‡πâ: {e}")
                continue

        for script, process in processes:
            stdout, stderr = process.stdout.strip(), process.stderr.strip()
            write_log(f"\nüìå Output ‡∏à‡∏≤‡∏Å `{script}`:\n{stdout}")
            if stderr:
                write_log(f"‚ö†Ô∏è Error ‡∏à‡∏≤‡∏Å `{script}`:\n{stderr}")

        write_log(f"\n‚úÖ --- Step {step} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ---\n")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ
def wait_until_midnight():
    now = datetime.now()
    next_run_time = (now + timedelta(days=1)).replace(hour=0, minute=1, second=0, microsecond=0)
    wait_seconds = (next_run_time - now).total_seconds()

    # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    write_log("\n\n\n" + "=" * 80 + "\n" * 5)  # üîπ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ
    write_log(f"‚è≥ ‡∏à‡∏∞‡∏£‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {int(wait_seconds)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ({next_run_time.strftime('%Y-%m-%d %H:%M:%S')})...\n")
    write_log("\n" * 5 + "=" * 80 + "\n\n\n")  # üîπ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ

    time.sleep(wait_seconds)

# ‚úÖ ‡∏•‡∏π‡∏õ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏≠‡∏ô 00:01 ‡∏ô.
while True:
    run_all_scripts()
    wait_until_midnight()

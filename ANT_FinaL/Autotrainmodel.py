import numpy as np
import pandas as pd
import pymysql
import joblib
import tensorflow as tf
import tensorflow.keras.backend as K
from tensorflow.keras.models import load_model
from tensorflow.keras.saving import register_keras_serializable

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Feature Columns ‡πÅ‡∏•‡∏∞ Scaler
feature_columns = joblib.load("../LSTM_model/feature_columns.pkl")
scaler_features = joblib.load("../LSTM_model/scaler_features.pkl")
scaler_target = joblib.load("../LSTM_model/scaler_target.pkl")
ticker_encoder = joblib.load("../LSTM_model/ticker_encoder.pkl")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Weighted Stacking Model
weighted_stacking_price = joblib.load("../Ensemble_Model/weighted_stacking_price.pkl")
weighted_stacking_direction = joblib.load("../Ensemble_Model/weighted_stacking_direction.pkl")

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Base Models (XGBoost ‡πÅ‡∏•‡∏∞ RandomForest)
xgb_model = joblib.load("../Ensemble_Model/xgb_model_price.pkl")
rf_model = joblib.load("../Ensemble_Model/rf_model_price.pkl")
xgb_dir_model = joblib.load("../Ensemble_Model/xgb_model_direction.pkl")
rf_dir_model = joblib.load("../Ensemble_Model/rf_model_direction.pkl")

def walk_forward_validation_multi_task(
    db_connection, feature_columns, scaler_features, scaler_target, ticker_encoder, seq_length=10
):
    """
    ‡∏ó‡∏≥ Walk-Forward Validation ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Weighted Stacking Model
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `PredictionPrice` ‡πÅ‡∏•‡∏∞ `PredictionTrend` ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
    
    Args:
        db_connection: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
        feature_columns: ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        scaler_features: Scaler ‡∏Ç‡∏≠‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå
        scaler_target: Scaler ‡∏Ç‡∏≠‡∏á Price
        ticker_encoder: LabelEncoder ‡∏Ç‡∏≠‡∏á Ticker
        seq_length: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß sequence
    """
    all_predictions = []
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Stock
    query_tickers = "SELECT DISTINCT StockSymbol FROM Stock"
    tickers = pd.read_sql(query_tickers, db_connection)['StockSymbol'].tolist()

    for ticker in tickers:
        print(f"\nüìà Processing Ticker: {ticker}")
        ticker_id_val = ticker_encoder.transform([ticker])[0]

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 10 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å StockDetail
        query_stock = f"""
            SELECT Date, OpenPrice, HighPrice, LowPrice, ClosePrice, Volume, TotalRevenue, QoQGrowth, EPS,ROE, NetProfitMarginNetProfitMargin,DebtToEquity,PERatio,
            FROM StockDetail 
            WHERE StockSymbol = '{ticker}' 
            ORDER BY Date DESC 
            LIMIT {seq_length}
        """
        df_ticker = pd.read_sql(query_stock, db_connection).sort_values('Date').reset_index(drop=True)

        if len(df_ticker) < seq_length:
            print(f"‚ö†Ô∏è Not enough data for {ticker}, skipping...")
            continue

        # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 10 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
        historical_data = df_ticker.iloc[-seq_length:]
        features = historical_data[feature_columns].values
        ticker_ids = np.full((seq_length,), ticker_id_val)

        # ‚úÖ ‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feature ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
        features_scaled = scaler_features.transform(features)
        X_features = features_scaled.reshape(1, seq_length, len(feature_columns))
        X_ticker = ticker_ids.reshape(1, seq_length)

        # ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ Base Models
        pred_price_xgb = xgb_model.predict(X_features.reshape(1, -1))[0]
        pred_price_rf = rf_model.predict(X_features.reshape(1, -1))[0]

        # ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Base Models
        pred_dir_xgb = xgb_dir_model.predict(X_features.reshape(1, -1))[0]
        pred_dir_rf = rf_dir_model.predict(X_features.reshape(1, -1))[0]

        # ‚úÖ ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Scaler
        pred_price_xgb_actual = scaler_target.inverse_transform(np.array([[pred_price_xgb]]))[0][0]
        pred_price_rf_actual = scaler_target.inverse_transform(np.array([[pred_price_rf]]))[0][0]

        # ‚úÖ ‡πÉ‡∏ä‡πâ Weighted Stacking
        w_lstm, w_gru, w_xgb, w_rf = 0.3, 0.3, 0.2, 0.2
        predicted_price = (w_xgb * pred_price_xgb_actual) + (w_rf * pred_price_rf_actual)
        predicted_dir = (0.2 * pred_dir_xgb) + (0.2 * pred_dir_rf)
        predicted_dir = 1 if predicted_dir >= 0.5 else 0

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î + 1 ‡∏ß‡∏±‡∏ô
        future_date = pd.to_datetime(df_ticker.iloc[-1]['Date']) + pd.DateOffset(1)

        print(f"‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {future_date}:")
        print(f"   - Predicted Price: {predicted_price:.2f}")
        print(f"   - Predicted Direction: {'Up' if predicted_dir == 1 else 'Down'}")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á `future_date` ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        check_query = f"""
            SELECT COUNT(*) FROM StockDetail 
            WHERE StockSymbol = '{ticker}' 
            AND Date = '{future_date.strftime('%Y-%m-%d')}'
        """
        cursor = db_connection.cursor()
        cursor.execute(check_query)
        count = cursor.fetchone()[0]

        if count > 0:
            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `PredictionPrice` ‡πÅ‡∏•‡∏∞ `PredictionTrend`
            update_query = f"""
                UPDATE StockDetail 
                SET PredictionPrice = {predicted_price}, PredictionTrend = {predicted_dir}
                WHERE StockSymbol = '{ticker}' 
                AND Date = '{future_date.strftime('%Y-%m-%d')}'
            """
            cursor.execute(update_query)
            db_connection.commit()
            print(f"   ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ({ticker} - {future_date})")
        else:
            # ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á `future_date`
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {ticker} - {future_date} ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            db_connection.rollback()

        # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        all_predictions.append({
            'Ticker': ticker,
            'Date': future_date,
            'Predicted_Price': predicted_price,
            'Predicted_Dir': predicted_dir,
        })

    print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")

    # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ DataFrame ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    return pd.DataFrame(all_predictions)

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
db_connection = pymysql.connect(
    host="10.10.50.62",
    user="trademine",
    password="trade789",
    database="TradeMine",
    cursorclass=pymysql.cursors.DictCursor
)

# ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
predictions_df = walk_forward_validation_multi_task(
    db_connection=db_connection,
    feature_columns=feature_columns,
    scaler_features=scaler_features,
    scaler_target=scaler_target,
    ticker_encoder=ticker_encoder,
    seq_length=10
)

# ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
predictions_df.to_csv("weighted_stacking_predictions.csv", index=False)
print("\n‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå 'weighted_stacking_predictions.csv' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
